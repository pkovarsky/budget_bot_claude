import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from database import get_db_session, User
from services.balance_service import BalanceService
from utils.telegram_utils import safe_edit_message, safe_answer_callback

logger = logging.getLogger(__name__)


async def balance_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /balance"""
    user_id = update.effective_user.id
    balance_service = BalanceService()
    
    db = get_db_session()
    try:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        if not user:
            keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]]
            await update.message.reply_text(
                "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        balances = balance_service.get_all_balances(user.id)
        
        if not balances:
            keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]]
            await update.message.reply_text(
                "üí≥ **–ë–∞–ª–∞–Ω—Å**\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.\n"
                "–î–æ–±–∞–≤—å—Ç–µ –¥–æ—Ö–æ–¥—ã –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥—ã, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –±–∞–ª–∞–Ω—Å.",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–∞–º–∏
        message_text = "üí≥ **–í–∞—à –±–∞–ª–∞–Ω—Å**\n\n"
        
        for balance in balances:
            balance_emoji = "üí∞" if balance.amount >= 0 else "üí∏"
            message_text += f"{balance_emoji} {balance.amount:+.2f} {balance.currency}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ —ç—Ç–æ –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
        message_text += "\nüìä –≠—Ç–æ –≤–∞—à –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å:\n"
        message_text += "‚Ä¢ ‚ûï –î–æ—Ö–æ–¥—ã —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç –±–∞–ª–∞–Ω—Å\n"
        message_text += "‚Ä¢ ‚ûñ –†–∞—Å—Ö–æ–¥—ã —É–º–µ–Ω—å—à–∞—é—Ç –±–∞–ª–∞–Ω—Å\n"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å", callback_data="balance_recalculate")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        
        await update.message.reply_text(
            message_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    finally:
        db.close()


async def balance_command_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /balance —á–µ—Ä–µ–∑ callback"""
    query = update.callback_query
    await safe_answer_callback(query)
    
    user_id = update.effective_user.id
    balance_service = BalanceService()
    
    db = get_db_session()
    try:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        if not user:
            await safe_edit_message(query, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        balances = balance_service.get_all_balances(user.id)
        
        if not balances:
            keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]]
            await safe_edit_message(query,
                "üí≥ **–ë–∞–ª–∞–Ω—Å**\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.\n"
                "–î–æ–±–∞–≤—å—Ç–µ –¥–æ—Ö–æ–¥—ã –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥—ã, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –±–∞–ª–∞–Ω—Å.",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–∞–º–∏
        message_text = "üí≥ **–í–∞—à –±–∞–ª–∞–Ω—Å**\n\n"
        
        for balance in balances:
            balance_emoji = "üí∞" if balance.amount >= 0 else "üí∏"
            message_text += f"{balance_emoji} {balance.amount:+.2f} {balance.currency}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ —ç—Ç–æ –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
        message_text += "\nüìä –≠—Ç–æ –≤–∞—à –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å:\n"
        message_text += "‚Ä¢ ‚ûï –î–æ—Ö–æ–¥—ã —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç –±–∞–ª–∞–Ω—Å\n"
        message_text += "‚Ä¢ ‚ûñ –†–∞—Å—Ö–æ–¥—ã —É–º–µ–Ω—å—à–∞—é—Ç –±–∞–ª–∞–Ω—Å\n"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å", callback_data="balance_recalculate")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        
        await safe_edit_message(query,
            message_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    finally:
        db.close()


async def handle_balance_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞"""
    query = update.callback_query
    await safe_answer_callback(query)
    
    user_id = update.effective_user.id
    
    if query.data == "balance_recalculate":
        balance_service = BalanceService()
        
        db = get_db_session()
        try:
            user = db.query(User).filter(User.telegram_id == user_id).first()
            if not user:
                await safe_edit_message(query, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
                return
            
            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—Å–µ—Ö –≤–∞–ª—é—Ç
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–∞–ª—é—Ç—ã –∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            from database import Transaction
            currencies = db.query(Transaction.currency).filter(
                Transaction.user_id == user.id
            ).distinct().all()
            
            recalculated_balances = []
            for currency_tuple in currencies:
                currency = currency_tuple[0]
                balance = balance_service.recalculate_balance(user.id, currency)
                recalculated_balances.append(balance)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
            if not recalculated_balances:
                keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]]
                await safe_edit_message(query,
                    "üí≥ **–ë–∞–ª–∞–Ω—Å –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω**\n\n"
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.\n"
                    "–î–æ–±–∞–≤—å—Ç–µ –¥–æ—Ö–æ–¥—ã –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥—ã, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –±–∞–ª–∞–Ω—Å.",
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='Markdown'
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–Ω—ã–º–∏ –±–∞–ª–∞–Ω—Å–∞–º–∏
            message_text = "üí≥ **–ë–∞–ª–∞–Ω—Å –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω**\n\n"
            
            for balance in recalculated_balances:
                balance_emoji = "üí∞" if balance.amount >= 0 else "üí∏"
                message_text += f"{balance_emoji} {balance.amount:+.2f} {balance.currency}\n"
            
            message_text += "\n‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –≤–∞—à–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –µ—â–µ —Ä–∞–∑", callback_data="balance_recalculate")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ]
            
            await safe_edit_message(query,
                message_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            
        finally:
            db.close()
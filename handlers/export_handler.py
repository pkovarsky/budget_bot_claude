import logging
import pandas as pd
import io
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from database import get_db_session, User, Category, Transaction
from utils.telegram_utils import safe_edit_message, safe_answer_callback

logger = logging.getLogger(__name__)


async def export_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /export"""
    user_id = update.effective_user.id
    
    db = get_db_session()
    try:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        if not user:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        transactions = db.query(Transaction).filter(Transaction.user_id == user.id).all()
        
        if not transactions:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
            return
            
        await update.message.reply_text("üìä –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...")
        
        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        data = []
        for transaction in transactions:
            category = db.query(Category).filter(Category.id == transaction.category_id).first()
            
            data.append({
                '–î–∞—Ç–∞': transaction.created_at.strftime('%Y-%m-%d %H:%M:%S'),
                '–¢–∏–ø': '–î–æ—Ö–æ–¥' if transaction.amount > 0 else '–†–∞—Å—Ö–æ–¥',
                '–°—É–º–º–∞': abs(transaction.amount),
                '–í–∞–ª—é—Ç–∞': transaction.currency,
                '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': category.name if category else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                '–û–ø–∏—Å–∞–Ω–∏–µ': transaction.description
            })
        
        df = pd.DataFrame(data)
        
        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
        excel_buffer = io.BytesIO()
        with pd.ExcelWriter(excel_buffer, engine='openpyxl') as writer:
            # –û—Å–Ω–æ–≤–Ω–æ–π –ª–∏—Å—Ç —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
            df.to_excel(writer, sheet_name='–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', index=False)
            
            # –õ–∏—Å—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            stats_data = []
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∞–ª—é—Ç–∞–º
            stats_data.append({
                '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å': '–û–±—â–∏–π –¥–æ—Ö–æ–¥',
                'EUR': df[(df['–¢–∏–ø'] == '–î–æ—Ö–æ–¥') & (df['–í–∞–ª—é—Ç–∞'] == 'EUR')]['–°—É–º–º–∞'].sum(),
                'USD': df[(df['–¢–∏–ø'] == '–î–æ—Ö–æ–¥') & (df['–í–∞–ª—é—Ç–∞'] == 'USD')]['–°—É–º–º–∞'].sum()
            })
            
            stats_data.append({
                '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å': '–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã',
                'EUR': df[(df['–¢–∏–ø'] == '–†–∞—Å—Ö–æ–¥') & (df['–í–∞–ª—é—Ç–∞'] == 'EUR')]['–°—É–º–º–∞'].sum(),
                'USD': df[(df['–¢–∏–ø'] == '–†–∞—Å—Ö–æ–¥') & (df['–í–∞–ª—é—Ç–∞'] == 'USD')]['–°—É–º–º–∞'].sum()
            })
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            category_stats = df[df['–¢–∏–ø'] == '–†–∞—Å—Ö–æ–¥'].groupby('–ö–∞—Ç–µ–≥–æ—Ä–∏—è')['–°—É–º–º–∞'].sum().reset_index()
            category_stats = category_stats.sort_values('–°—É–º–º–∞', ascending=False)
            
            stats_df = pd.DataFrame(stats_data)
            stats_df.to_excel(writer, sheet_name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', index=False)
            
            if not category_stats.empty:
                category_stats.to_excel(writer, sheet_name='–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', index=False)
        
        excel_buffer.seek(0)
        
        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        current_date = datetime.now().strftime('%Y-%m-%d')
        filename = f"budget_export_{current_date}.xlsx"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_document(
            document=excel_buffer.getvalue(),
            filename=filename,
            caption=f"üìä **–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö**\n\n"
                    f"–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –≤–∞—à–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.\n"
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(transactions)}\n"
                    f"–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {current_date}",
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    finally:
        db.close()


async def export_command_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /export —á–µ—Ä–µ–∑ callback"""
    query = update.callback_query
    await safe_answer_callback(query)
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await safe_edit_message(query,
        "üì§ **–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö**\n\n"
        "–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /export\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /export –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Excel —Ñ–∞–π–ª–∞ —Å –≤–∞—à–∏–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏.",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from database import get_db_session, User, Category
from utils.localization import get_message, get_default_categories, get_supported_languages

logger = logging.getLogger(__name__)


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    username = update.effective_user.username
    
    db = get_db_session()
    try:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        if not user:
            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫
            await show_language_selection(update, user_id, username)
            return
        else:
            # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            name = user.name or "–¥—Ä—É–≥"
            await update.message.reply_text(
                f"{get_message('welcome_back', user.language, name=name)}\n\n"
                f"{get_message('help_commands', user.language)}"
            )
    finally:
        db.close()


async def show_language_selection(update: Update, user_id: int, username: str) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    languages = get_supported_languages()
    keyboard = []
    
    for lang_code, lang_name in languages.items():
        keyboard.append([InlineKeyboardButton(
            lang_name, 
            callback_data=f"setup_lang_{lang_code}_{user_id}_{username or 'unknown'}"
        )])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üåç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Budget Bot!\n"
        "Welcome to Budget Bot!\n"
        "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ Budget Bot!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language / –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def handle_language_setup(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ"""
    query = update.callback_query
    await query.answer()
    
    data_parts = query.data.split('_')
    if len(data_parts) < 4:
        return
    
    language = data_parts[2]
    user_id = int(data_parts[3])
    username = data_parts[4] if data_parts[4] != 'unknown' else None
    
    db = get_db_session()
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User(
            telegram_id=user_id, 
            username=username,
            language=language
        )
        db.add(user)
        db.commit()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
        default_categories = get_default_categories(language)
        for cat_name in default_categories:
            category = Category(name=cat_name, user_id=user.id, is_default=True)
            db.add(category)
        db.commit()
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
        welcome_text = (
            f"{get_message('welcome', language, name='–¥—Ä—É–≥')}\n\n"
            f"{get_message('start_description', language)}\n\n"
            f"{get_message('help_commands', language)}"
        )
        
        await query.edit_message_text(welcome_text, parse_mode='Markdown')
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —É–∫–∞–∑–∞—Ç—å –∏–º—è
        await ask_for_name(query, user, language)
        
    finally:
        db.close()


async def ask_for_name(query, user, language: str) -> None:
    """–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–∫–∞–∑–∞—Ç—å –∏–º—è"""
    keyboard = [
        [InlineKeyboardButton(
            "üë§ –£–∫–∞–∑–∞—Ç—å –∏–º—è", 
            callback_data=f"setup_name_{user.id}"
        )],
        [InlineKeyboardButton(
            "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", 
            callback_data="setup_skip_name"
        )]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–º–µ–Ω–∏
    from telegram import Bot
    bot = Bot.get_current()
    await bot.send_message(
        chat_id=query.message.chat_id,
        text=f"üëã –•–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å –≤–∞—à–µ –∏–º—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏?",
        reply_markup=reply_markup
    )


async def handle_name_setup(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–º–µ–Ω–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "setup_skip_name":
        await query.edit_message_text("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥.")
        return
    
    if query.data.startswith("setup_name_"):
        user_id = int(query.data.split('_')[2])
        context.user_data['setting_up_name'] = user_id

        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="setup_back")]]
        await query.edit_message_text(
            "üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è (–¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤):",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return
    if query.data == "setup_back":
        db = get_db_session()
        try:
            user = db.query(User).filter(User.telegram_id == query.from_user.id).first()
            language = user.language if user else "ru"
            await ask_for_name(query, user, language)
        finally:
            db.close()
        context.user_data.pop('setting_up_name', None)
        return


async def handle_name_input_setup(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø—Ä–∏ –ø–µ—Ä–≤–∏—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–µ"""
    if 'setting_up_name' not in context.user_data:
        return
    
    user_id = context.user_data['setting_up_name']
    name = update.message.text.strip()
    
    if not name or len(name) > 50:
        await update.message.reply_text("–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    db = get_db_session()
    try:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        if user:
            user.name = name
            db.commit()
            
            await update.message.reply_t—áext(
                f"‚úÖ –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}!\n\n"
                f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥.",
                parse_mode='Markdown'
            )
        
    finally:
        db.close()
        context.user_data.pop('setting_up_name', None)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
    user_id = update.effective_user.id
    
    db = get_db_session()
    try:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        language = user.language if user else "ru"
        
        help_text = f"""
{get_message('help_title', language)}

**{get_message('transactions_section', language)}**
‚Ä¢ `35 –µ–≤—Ä–æ –ø—Ä–æ–¥—É–∫—Ç—ã` - –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥
‚Ä¢ `+2000 –µ–≤—Ä–æ –∑–∞—Ä–ø–ª–∞—Ç–∞` - –¥–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥
‚Ä¢ üì∏ **–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —á–µ–∫–∞** - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ

**{get_message('commands_section', language)}**
‚Ä¢ `/categories` - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
‚Ä¢ `/stats` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
‚Ä¢ `/limits` - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞–º–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
‚Ä¢ `/export` - —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel
‚Ä¢ `/edit` - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
‚Ä¢ `/settings` - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (—è–∑—ã–∫, –∏–º—è)
‚Ä¢ `/help` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π:**
‚Ä¢ –°—É–º–º–∞ + –≤–∞–ª—é—Ç–∞ + –æ–ø–∏—Å–∞–Ω–∏–µ
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: {get_message('supported_currencies', language)}
‚Ä¢ –î–ª—è –¥–æ—Ö–æ–¥–∞ –¥–æ–±–∞–≤—å—Ç–µ '+' –≤ –Ω–∞—á–∞–ª–æ

**{get_message('photo_section', language)}**
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤
‚Ä¢ –ò–ò —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Å—É–º–º—É, –≤–∞–ª—é—Ç—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ—Ç –ø–æ–∫—É–ø–∫—É
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —á–µ—Ç–∫–∏–µ —Ñ–æ—Ç–æ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        """
        await update.message.reply_text(help_text, parse_mode='Markdown')
        
    finally:
        db.close()
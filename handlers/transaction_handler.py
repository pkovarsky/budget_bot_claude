import logging
from datetime import datetime
from telegram import Update
from telegram.ext import ContextTypes

from database import get_db_session, User, Category, Transaction, Limit
from services.openai_service import OpenAIService
from utils.parsers import parse_transaction

logger = logging.getLogger(__name__)


class TransactionHandler:
    def __init__(self):
        self.openai_service = OpenAIService()

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        # –ï—Å–ª–∏ –∂–¥–µ–º –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if context.user_data.get('waiting_for_category'):
            await self.handle_new_category(update, context)
            return
            
        # –ï—Å–ª–∏ –∂–¥–µ–º –≤–≤–æ–¥–∞ –ª–∏–º–∏—Ç–∞
        if context.user_data.get('waiting_for_limit'):
            await self.handle_new_limit(update, context)
            return
            
        text = update.message.text.strip()
        user_id = update.effective_user.id
        
        db = get_db_session()
        try:
            user = db.query(User).filter(User.telegram_id == user_id).first()
            if not user:
                await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
                return
            
            # –ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏—è
            transaction_data = parse_transaction(text)
            if not transaction_data:
                await update.message.reply_text(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é. ü§î\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: '35 –µ–≤—Ä–æ –ø—Ä–æ–¥—É–∫—Ç—ã' –∏–ª–∏ '+2000 –µ–≤—Ä–æ –∑–∞—Ä–ø–ª–∞—Ç–∞'\n"
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
                )
                return
            
            amount, currency, description, is_income = transaction_data
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ OpenAI
            category = await self._determine_category(description, user.id, db)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            transaction = Transaction(
                user_id=user.id,
                amount=amount if is_income else -amount,
                currency=currency,
                description=description,
                category_id=category.id,
                created_at=datetime.now()
            )
            
            db.add(transaction)
            db.commit()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤
            warning_msg = ""
            if not is_income:
                warning_msg = await self._check_limits(user.id, category.id, abs(amount), currency, db)
            
            operation_type = "üí∞ –î–æ—Ö–æ–¥" if is_income else "üí∏ –†–∞—Å—Ö–æ–¥"
            await update.message.reply_text(
                f"‚úÖ {operation_type} –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                f"–°—É–º–º–∞: {amount} {currency}\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                f"{warning_msg}"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        finally:
            db.close()

    async def _determine_category(self, description: str, user_id: int, db) -> Category:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–æ–º–æ—â—å—é OpenAI"""
        categories = db.query(Category).filter(Category.user_id == user_id).all()
        
        if not categories:
            # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–ü—Ä–æ—á–µ–µ" –µ—Å–ª–∏ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            default_category = Category(name="–ü—Ä–æ—á–µ–µ", user_id=user_id, is_default=True)
            db.add(default_category)
            db.commit()
            return default_category
        
        category_names = [cat.name for cat in categories]
        
        try:
            suggested_category = await self.openai_service.categorize_transaction(
                description, category_names
            )
            
            # –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –∏–º–µ–Ω–∏
            for category in categories:
                if category.name.lower() == suggested_category.lower():
                    return category
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ OpenAI: {e}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–ü—Ä–æ—á–µ–µ" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_category = next((cat for cat in categories if cat.name == "–ü—Ä–æ—á–µ–µ"), categories[0])
        return default_category

    async def _check_limits(self, user_id: int, category_id: int, amount: float, currency: str, db) -> str:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ —Ä–∞—Å—Ö–æ–¥–æ–≤"""
        limits = db.query(Limit).filter(
            Limit.user_id == user_id,
            Limit.category_id == category_id
        ).all()
        
        warning_messages = []
        
        for limit in limits:
            if limit.currency != currency:
                continue
                
            # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            current_month_start = datetime.now().replace(day=1, hour=0, minute=0, second=0, microsecond=0)
            
            month_expenses = db.query(Transaction).filter(
                Transaction.user_id == user_id,
                Transaction.category_id == category_id,
                Transaction.currency == currency,
                Transaction.amount < 0,
                Transaction.created_at >= current_month_start
            ).all()
            
            total_spent = sum(abs(transaction.amount) for transaction in month_expenses)
            total_spent += amount  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ç—Ä–∞—Ç—É
            
            if total_spent > limit.amount:
                category = db.query(Category).filter(Category.id == category_id).first()
                warning_messages.append(
                    f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category.name}': "
                    f"{total_spent:.2f}/{limit.amount:.2f} {currency}"
                )
            elif total_spent > limit.amount * 0.8:  # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ 80%
                category = db.query(Category).filter(Category.id == category_id).first()
                warning_messages.append(
                    f"üîî –ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ –ª–∏–º–∏—Ç—É '{category.name}': "
                    f"{total_spent:.2f}/{limit.amount:.2f} {currency}"
                )
        
        return "\n".join(warning_messages)

    async def handle_new_category(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        category_name = update.message.text.strip()
        user_id = update.effective_user.id
        
        if len(category_name) > 50:
            await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤).")
            return
        
        db = get_db_session()
        try:
            user = db.query(User).filter(User.telegram_id == user_id).first()
            if not user:
                await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
            existing_category = db.query(Category).filter(
                Category.user_id == user.id,
                Category.name == category_name
            ).first()
            
            if existing_category:
                await update.message.reply_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                return
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            new_category = Category(name=category_name, user_id=user.id, is_default=False)
            db.add(new_category)
            db.commit()
            
            await update.message.reply_text(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
            
        finally:
            db.close()
            context.user_data['waiting_for_category'] = None

    async def handle_new_limit(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –ª–∏–º–∏—Ç–∞"""
        from utils.parsers import parse_amount_and_currency
        
        text = update.message.text.strip()
        user_id = update.effective_user.id
        category_id = context.user_data.get('waiting_for_limit')
        
        # –ü–∞—Ä—Å–∏–Ω–≥ —Å—É–º–º—ã –∏ –≤–∞–ª—é—Ç—ã
        result = parse_amount_and_currency(text)
        if not result:
            await update.message.reply_text(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –∏ –≤–∞–ª—é—Ç—É, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
                "`500 EUR` –∏–ª–∏ `300 USD`",
                parse_mode='Markdown'
            )
            return
        
        amount, currency = result
        
        if amount <= 0:
            await update.message.reply_text("–°—É–º–º–∞ –ª–∏–º–∏—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
            return
        
        db = get_db_session()
        try:
            user = db.query(User).filter(User.telegram_id == user_id).first()
            if not user:
                await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
                return
            
            category = db.query(Category).filter(
                Category.id == category_id,
                Category.user_id == user.id
            ).first()
            
            if not category:
                await update.message.reply_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –ª–∏–º–∏—Ç–∞ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            existing_limit = db.query(Limit).filter(
                Limit.user_id == user.id,
                Limit.category_id == category_id
            ).first()
            
            if existing_limit:
                await update.message.reply_text("–î–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏–º–∏—Ç.")
                return
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç
            limit = Limit(
                user_id=user.id,
                category_id=category_id,
                amount=amount,
                currency=currency
            )
            
            db.add(limit)
            db.commit()
            
            await update.message.reply_text(
                f"‚úÖ –õ–∏–º–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}\n"
                f"–õ–∏–º–∏—Ç: {amount} {currency}"
            )
            
        finally:
            db.close()
            context.user_data['waiting_for_limit'] = None
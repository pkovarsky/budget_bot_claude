"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –≤—ã–±–æ—Ä–æ–º –ø–µ—Ä–∏–æ–¥–∞
"""
import logging
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from database import get_db_session, User
from services.chart_service import ChartService
from utils.localization import get_message
from utils.telegram_utils import safe_edit_message, safe_answer_callback, safe_delete_message

logger = logging.getLogger(__name__)

async def charts_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
    user_id = update.effective_user.id
    
    db = get_db_session()
    try:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        if not user:
            keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]]
            await update.message.reply_text(
                "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return
        
        keyboard = [
            [InlineKeyboardButton("ü•ß –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="chart_pie"),
             InlineKeyboardButton("üìà –¢—Ä–µ–Ω–¥ —Ä–∞—Å—Ö–æ–¥–æ–≤", callback_data="chart_trends")],
            [InlineKeyboardButton("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –º–µ—Å—è—Ü–∞–º", callback_data="chart_monthly")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = (
            f"üìä **–ì—Ä–∞—Ñ–∏–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:\n\n"
            f"ü•ß **–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º** - –∫—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞\n"
            f"üìà **–¢—Ä–µ–Ω–¥ —Ä–∞—Å—Ö–æ–¥–æ–≤** - –¥–∏–Ω–∞–º–∏–∫–∞ –ø–æ –¥–Ω—è–º\n"
            f"üìä **–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –º–µ—Å—è—Ü–∞–º** - —Å—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞\n\n"
            f"–î–ª—è –∫–∞–∂–¥–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."
        )
        
        await update.message.reply_text(
            message,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    finally:
        db.close()

async def handle_charts_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
    query = update.callback_query
    await safe_answer_callback(query)
    
    user_id = update.effective_user.id
    data = query.data
    
    db = get_db_session()
    try:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        if not user:
            keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]]
            await safe_edit_message(query, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start", reply_markup=InlineKeyboardMarkup(keyboard))
            return
        
        if data == "chart_pie":
            context.user_data['chart_type'] = 'pie'
            await _show_period_selection(query, "ü•ß –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
        elif data == "chart_trends":
            context.user_data['chart_type'] = 'trends'
            await _show_period_selection(query, "üìà –¢—Ä–µ–Ω–¥ —Ä–∞—Å—Ö–æ–¥–æ–≤")
        elif data == "chart_monthly":
            context.user_data['chart_type'] = 'monthly'
            await _show_monthly_period_selection(query)
        elif data.startswith("period_"):
            await _handle_period_selection(query, context, data)
        elif data.startswith("monthly_"):
            await _handle_monthly_period_selection(query, context, data)
        
    finally:
        db.close()

async def _show_period_selection(query, chart_name: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
    keyboard = [
        [InlineKeyboardButton("üìÖ 7 –¥–Ω–µ–π", callback_data="period_7")],
        [InlineKeyboardButton("üìÖ 14 –¥–Ω–µ–π", callback_data="period_14")],
        [InlineKeyboardButton("üìÖ 30 –¥–Ω–µ–π", callback_data="period_30")],
        [InlineKeyboardButton("üìÖ 60 –¥–Ω–µ–π", callback_data="period_60")],
        [InlineKeyboardButton("üìÖ 90 –¥–Ω–µ–π", callback_data="period_90")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = (
        f"üìä **{chart_name}**\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:"
    )
    
    await safe_edit_message(query, message, reply_markup=reply_markup, parse_mode='Markdown')

async def _show_monthly_period_selection(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –º–µ—Å—è—á–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
    keyboard = [
        [InlineKeyboardButton("üìÖ 3 –º–µ—Å—è—Ü–∞", callback_data="monthly_3")],
        [InlineKeyboardButton("üìÖ 6 –º–µ—Å—è—Ü–µ–≤", callback_data="monthly_6")],
        [InlineKeyboardButton("üìÖ 12 –º–µ—Å—è—Ü–µ–≤", callback_data="monthly_12")],
        [InlineKeyboardButton("üìÖ 24 –º–µ—Å—è—Ü–∞", callback_data="monthly_24")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = (
        f"üìä **–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –º–µ—Å—è—Ü–∞–º**\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:"
    )
    
    await safe_edit_message(query, message, reply_markup=reply_markup, parse_mode='Markdown')

async def _handle_period_selection(query, context: ContextTypes.DEFAULT_TYPE, data: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
    period_days = int(data.replace("period_", ""))
    chart_type = context.user_data.get('chart_type')
    
    if not chart_type:
        keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]]
        await safe_edit_message(query, "‚ùå –û—à–∏–±–∫–∞: —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω", reply_markup=InlineKeyboardMarkup(keyboard))
        return
    
    await safe_edit_message(query, "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥—Ä–∞—Ñ–∏–∫...")
    
    chart_service = ChartService()
    
    try:
        if chart_type == 'pie':
            chart_buffer = chart_service.generate_category_pie_chart(
                user_id=query.from_user.id,
                period_days=period_days
            )
            chart_name = "—Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"
        elif chart_type == 'trends':
            chart_buffer = chart_service.generate_spending_trends_chart(
                user_id=query.from_user.id,
                period_days=period_days
            )
            chart_name = "—Ç—Ä–µ–Ω–¥–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤"
        else:
            keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]]
            await safe_edit_message(query, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞", reply_markup=InlineKeyboardMarkup(keyboard))
            return
        
        if chart_buffer:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
            await query.message.reply_photo(
                photo=chart_buffer,
                caption=f"üìä –ì—Ä–∞—Ñ–∏–∫ {chart_name} –∑–∞ {period_days} –¥–Ω–µ–π"
            )
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
            await safe_delete_message(query)
        else:
            keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]]
            await safe_edit_message(query, 
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫.\n"
                f"–í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ ({period_days} –¥–Ω–µ–π).",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
        keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]]
        await safe_edit_message(query,
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞.\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    finally:
        context.user_data.pop('chart_type', None)

async def _handle_monthly_period_selection(query, context: ContextTypes.DEFAULT_TYPE, data: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –º–µ—Å—è—á–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
    months = int(data.replace("monthly_", ""))
    
    await safe_edit_message(query, "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥—Ä–∞—Ñ–∏–∫...")
    
    chart_service = ChartService()
    
    try:
        chart_buffer = chart_service.generate_monthly_comparison_chart(
            user_id=query.from_user.id,
            months=months
        )
        
        if chart_buffer:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
            await query.message.reply_photo(
                photo=chart_buffer,
                caption=f"üìä –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º –∑–∞ {months} –º–µ—Å."
            )
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
            await safe_delete_message(query)
        else:
            keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]]
            await safe_edit_message(query,
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫.\n"
                f"–í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ ({months} –º–µ—Å.).",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ—Å—è—á–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
        keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]]
        await safe_edit_message(query,
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞.\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )


# –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
async def charts_command_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /charts —á–µ—Ä–µ–∑ callback"""
    query = update.callback_query
    await safe_answer_callback(query)
    
    user_id = update.effective_user.id
    
    db = get_db_session()
    try:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        if not user:
            keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]]
            await safe_edit_message(query, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start", reply_markup=InlineKeyboardMarkup(keyboard))
            return
        
        keyboard = [
            [InlineKeyboardButton("ü•ß –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="chart_pie"),
             InlineKeyboardButton("üìà –¢—Ä–µ–Ω–¥ —Ä–∞—Å—Ö–æ–¥–æ–≤", callback_data="chart_trends")],
            [InlineKeyboardButton("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –º–µ—Å—è—Ü–∞–º", callback_data="chart_monthly")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = (
            f"üìä **–ì—Ä–∞—Ñ–∏–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:\n\n"
            f"ü•ß **–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º** - –∫—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞\n"
            f"üìà **–¢—Ä–µ–Ω–¥ —Ä–∞—Å—Ö–æ–¥–æ–≤** - –¥–∏–Ω–∞–º–∏–∫–∞ –ø–æ –¥–Ω—è–º\n"
            f"üìä **–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –º–µ—Å—è—Ü–∞–º** - —Å—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞\n\n"
            f"–î–ª—è –∫–∞–∂–¥–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."
        )
        
        await safe_edit_message(query, message, reply_markup=reply_markup, parse_mode='Markdown')
        
    finally:
        db.close()


async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ê–ª–∏–∞—Å –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
    await charts_command(update, context)

async def stats_command_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ê–ª–∏–∞—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    await charts_command_callback(update, context)

async def handle_stats_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ê–ª–∏–∞—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
    await handle_charts_callback(update, context)
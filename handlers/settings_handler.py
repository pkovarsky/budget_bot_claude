import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from database import get_db_session, User
from utils.localization import get_message, get_supported_languages

logger = logging.getLogger(__name__)


async def settings_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /settings –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    
    db = get_db_session()
    try:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        if not user:
            await update.message.reply_text(get_message("start_first", "ru"))
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
        keyboard = [
            [InlineKeyboardButton(
                get_message("language_settings", user.language), 
                callback_data="settings_language"
            )],
            [InlineKeyboardButton(
                get_message("name_settings", user.language), 
                callback_data="settings_name"
            )]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        current_lang = get_supported_languages().get(user.language, "üá∑üá∫ –†—É—Å—Å–∫–∏–π")
        current_name = user.name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        
        settings_text = (
            f"{get_message('settings', user.language)}\n\n"
            f"üåç {get_message('language_settings', user.language)}: {current_lang}\n"
            f"üë§ {get_message('name_settings', user.language)}: {current_name}"
        )
        
        await update.message.reply_text(
            settings_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    finally:
        db.close()


async def handle_settings_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    data = query.data
    
    db = get_db_session()
    try:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        if not user:
            await query.edit_message_text(get_message("start_first", "ru"))
            return
        
        if data == "settings_language":
            # –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
            keyboard = []
            languages = get_supported_languages()
            
            for lang_code, lang_name in languages.items():
                keyboard.append([InlineKeyboardButton(
                    lang_name, 
                    callback_data=f"set_lang_{lang_code}"
                )])
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings_back")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                get_message("choose_language", user.language),
                reply_markup=reply_markup
            )
            
        elif data.startswith("set_lang_"):
            # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è–∑—ã–∫
            new_language = data.split("_")[2]
            user.language = new_language
            db.commit()
            
            await query.edit_message_text(
                get_message("language_changed", new_language)
            )
            
        elif data == "settings_name":
            # –ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤–≤–æ–¥ –∏–º–µ–Ω–∏
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings_back")]]
            await query.edit_message_text(
                get_message("enter_name", user.language),
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            context.user_data['setting_name'] = True

        elif data == "settings_back":
            # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
            context.user_data.pop('setting_name', None)
            await settings_command(update, context)
            
    finally:
        db.close()


async def handle_name_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not context.user_data.get('setting_name'):
        return
    
    user_id = update.effective_user.id
    name = update.message.text.strip()
    
    if not name or len(name) > 50:
        await update.message.reply_text("–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    db = get_db_session()
    try:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        if not user:
            await update.message.reply_text(get_message("start_first", "ru"))
            return
        
        user.name = name
        db.commit()
        
        await update.message.reply_text(
            get_message("name_updated", user.language, name=name)
        )
        
    finally:
        db.close()
        context.user_data.pop('setting_name', None)
import logging
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from database import get_db_session, User, Category, Transaction
from services.chart_service import ChartService
from utils.telegram_utils import safe_edit_message, safe_answer_callback

logger = logging.getLogger(__name__)


async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats"""
    user_id = update.effective_user.id
    
    db = get_db_session()
    try:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        if not user:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
            return
        
        keyboard = [
            [InlineKeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="stats_today"),
             InlineKeyboardButton("üìÜ –≠—Ç–∞ –Ω–µ–¥–µ–ª—è", callback_data="stats_week")],
            [InlineKeyboardButton("üìä –≠—Ç–æ—Ç –º–µ—Å—è—Ü", callback_data="stats_month"),
             InlineKeyboardButton("üìà –í—Å–µ –≤—Ä–µ–º—è", callback_data="stats_all")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    finally:
        db.close()


async def handle_stats_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    data = query.data
    
    db = get_db_session()
    try:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        if not user:
            await query.edit_message_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
            return
        
        now = datetime.now()
        
        if data == "stats_today":
            start_date = now.replace(hour=0, minute=0, second=0, microsecond=0)
            period_name = "–°–µ–≥–æ–¥–Ω—è"
        elif data == "stats_week":
            start_date = now - timedelta(days=now.weekday())
            start_date = start_date.replace(hour=0, minute=0, second=0, microsecond=0)
            period_name = "–≠—Ç–∞ –Ω–µ–¥–µ–ª—è"
        elif data == "stats_month":
            start_date = now.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
            period_name = "–≠—Ç–æ—Ç –º–µ—Å—è—Ü"
        else:  # stats_all
            start_date = datetime(2020, 1, 1)
            period_name = "–í—Å–µ –≤—Ä–µ–º—è"
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
        transactions = db.query(Transaction).filter(
            Transaction.user_id == user.id,
            Transaction.created_at >= start_date
        ).all()
        
        if not transactions:
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="stats_back"),
                 InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                f"üìä **{period_name}**\n\n–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥.",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            return
        
        # –°—á–∏—Ç–∞–µ–º –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –≤–∞–ª—é—Ç–∞–º
        currencies = {}
        for transaction in transactions:
            currency = transaction.currency
            if currency not in currencies:
                currencies[currency] = {'income': 0, 'expenses': 0}
            
            if transaction.amount > 0:
                currencies[currency]['income'] += transaction.amount
            else:
                currencies[currency]['expenses'] += abs(transaction.amount)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (—Ç–æ–ª—å–∫–æ —Ä–∞—Å—Ö–æ–¥—ã)
        category_stats = {}
        for transaction in transactions:
            if transaction.amount < 0:
                category = db.query(Category).filter(Category.id == transaction.category_id).first()
                if category:
                    if category.name not in category_stats:
                        category_stats[category.name] = {}
                    
                    currency = transaction.currency
                    if currency not in category_stats[category.name]:
                        category_stats[category.name][currency] = 0
                    category_stats[category.name][currency] += abs(transaction.amount)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        text = f"üìä **{period_name}**\n\n"
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∞–ª—é—Ç–∞–º
        for currency, data in currencies.items():
            income = data['income']
            expenses = data['expenses']
            balance = income - expenses
            balance_emoji = "üíö" if balance >= 0 else "‚ù§Ô∏è"
            
            text += f"**{currency}:**\n"
            text += f"üí∞ –î–æ—Ö–æ–¥—ã: {income:.2f}\n"
            text += f"üí∏ –†–∞—Å—Ö–æ–¥—ã: {expenses:.2f}\n"
            text += f"{balance_emoji} –ë–∞–ª–∞–Ω—Å: {balance:.2f}\n\n"
        
        # –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤
        if category_stats:
            text += "**üè∑Ô∏è –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤:**\n"
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –æ–±—â–µ–π —Å—É–º–º–µ —Ä–∞—Å—Ö–æ–¥–æ–≤
            category_totals = []
            for cat_name, currencies_data in category_stats.items():
                total = sum(currencies_data.values())
                category_totals.append((cat_name, total, currencies_data))
            
            category_totals.sort(key=lambda x: x[1], reverse=True)
            
            for cat_name, total, currencies_data in category_totals[:5]:  # –¢–æ–ø 5
                text += f"‚Ä¢ {cat_name}: "
                currency_texts = []
                for currency, amount in currencies_data.items():
                    currency_texts.append(f"{amount:.2f} {currency}")
                text += ", ".join(currency_texts) + "\n"
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="stats_back"),
             InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    finally:
        db.close()


async def handle_stats_back(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    
    db = get_db_session()
    try:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        if not user:
            await query.edit_message_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
            return
        
        keyboard = [
            [InlineKeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="stats_today"),
             InlineKeyboardButton("üìÜ –≠—Ç–∞ –Ω–µ–¥–µ–ª—è", callback_data="stats_week")],
            [InlineKeyboardButton("üìä –≠—Ç–æ—Ç –º–µ—Å—è—Ü", callback_data="stats_month"),
             InlineKeyboardButton("üìà –í—Å–µ –≤—Ä–µ–º—è", callback_data="stats_all")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    finally:
        db.close()


async def handle_charts_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    data = query.data
    
    if data == "stats_charts":
        keyboard = [
            [InlineKeyboardButton("üç∞ –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="chart_pie_30")],
            [InlineKeyboardButton("üìà –¢—Ä–µ–Ω–¥ —Ä–∞—Å—Ö–æ–¥–æ–≤ (30 –¥–Ω–µ–π)", callback_data="chart_trend_30")],
            [InlineKeyboardButton("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –º–µ—Å—è—Ü–∞–º", callback_data="chart_monthly_6")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="stats_back")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üìä **–ì—Ä–∞—Ñ–∏–∫–∏ –∏ –¥–∏–∞–≥—Ä–∞–º–º—ã**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    elif data.startswith("chart_"):
        await query.edit_message_text("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥—Ä–∞—Ñ–∏–∫...")
        
        chart_service = ChartService()
        buffer = None
        
        if data == "chart_pie_30":
            buffer = chart_service.generate_category_pie_chart(user_id, 30)
            caption = "üç∞ –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π"
        elif data == "chart_trend_30":
            buffer = chart_service.generate_spending_trends_chart(user_id, 30)
            caption = "üìà –¢—Ä–µ–Ω–¥ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –¥–Ω—è–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π"
        elif data == "chart_monthly_6":
            buffer = chart_service.generate_monthly_comparison_chart(user_id, 6)
            caption = "üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤"
        
        if buffer:
            keyboard = [[InlineKeyboardButton("üîô –ö –≥—Ä–∞—Ñ–∏–∫–∞–º", callback_data="back_to_charts")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.message.reply_photo(
                photo=buffer,
                caption=caption,
                reply_markup=reply_markup
            )
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥—Ä–∞—Ñ–∏–∫..."
            await query.message.delete()
        else:
            keyboard = [[InlineKeyboardButton("üîô –ö –≥—Ä–∞—Ñ–∏–∫–∞–º", callback_data="back_to_charts")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "üòî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.\n"
                "–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.",
                reply_markup=reply_markup
            )
    
    elif data == "back_to_charts":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –≥—Ä–∞—Ñ–∏–∫–æ–≤, —É–¥–∞–ª—è—è —Ñ–æ—Ç–æ –∏ –ø–æ–∫–∞–∑—ã–≤–∞—è —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –º–µ–Ω—é
        keyboard = [
            [InlineKeyboardButton("üç∞ –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="chart_pie_30")],
            [InlineKeyboardButton("üìà –¢—Ä–µ–Ω–¥ —Ä–∞—Å—Ö–æ–¥–æ–≤ (30 –¥–Ω–µ–π)", callback_data="chart_trend_30")],
            [InlineKeyboardButton("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –º–µ—Å—è—Ü–∞–º", callback_data="chart_monthly_6")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="stats_back")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.message.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é –≥—Ä–∞—Ñ–∏–∫–æ–≤
        await query.message.reply_text(
            "üìä **–ì—Ä–∞—Ñ–∏–∫–∏ –∏ –¥–∏–∞–≥—Ä–∞–º–º—ã**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )


async def stats_command_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats —á–µ—Ä–µ–∑ callback"""
    query = update.callback_query
    await safe_answer_callback(query)
    
    user_id = update.effective_user.id
    
    db = get_db_session()
    try:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        if not user:
            await safe_edit_message(query, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
            return
        
        keyboard = [
            [InlineKeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="stats_today"),
             InlineKeyboardButton("üìÜ –≠—Ç–∞ –Ω–µ–¥–µ–ª—è", callback_data="stats_week")],
            [InlineKeyboardButton("üìä –≠—Ç–æ—Ç –º–µ—Å—è—Ü", callback_data="stats_month"),
             InlineKeyboardButton("üìà –í—Å–µ –≤—Ä–µ–º—è", callback_data="stats_all")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await safe_edit_message(query,
            "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    finally:
        db.close()
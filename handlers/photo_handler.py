import logging
from datetime import datetime
from telegram import Update
from telegram.ext import ContextTypes
import asyncio

from database import get_db_session, User, Category, Transaction
from openai_service import OpenAIService

logger = logging.getLogger(__name__)


async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —á–µ–∫–æ–≤"""
    user_id = update.effective_user.id
    
    if not update.message.photo:
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_message = await update.message.reply_text(
        "üì∏ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —á–µ–∫... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
    )
    
    try:
        db = get_db_session()
        try:
            user = db.query(User).filter(User.telegram_id == user_id).first()
            if not user:
                await processing_message.edit_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –≤ –ª—É—á—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ
            photo = update.message.photo[-1]  # –°–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            file = await photo.get_file()
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_data = await file.download_as_bytearray()
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            categories = db.query(Category).filter(Category.user_id == user.id).all()
            category_names = [cat.name for cat in categories]
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ–∫ —á–µ—Ä–µ–∑ OpenAI
            openai_service = OpenAIService()
            transactions = await openai_service.process_receipt_photo(
                bytes(image_data), 
                category_names
            )
            
            if not transactions:
                await processing_message.edit_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —á–µ–∫. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–æ—Ç–æ —á–µ—Ç–∫–æ–µ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—É–ø–∫–∞—Ö."
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            saved_transactions = []
            for transaction_data in transactions:
                # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                category = next(
                    (cat for cat in categories if cat.name == transaction_data.get('category')), 
                    categories[0] if categories else None
                )
                
                if not category:
                    # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–ü—Ä–æ—á–µ–µ" –µ—Å–ª–∏ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                    category = Category(name="–ü—Ä–æ—á–µ–µ", user_id=user.id, is_default=True)
                    db.add(category)
                    db.commit()
                
                # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                transaction = Transaction(
                    user_id=user.id,
                    amount=-abs(transaction_data['amount']),  # –†–∞—Å—Ö–æ–¥—ã –≤—Å–µ–≥–¥–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ
                    currency=transaction_data['currency'],
                    description=transaction_data['description'],
                    category_id=category.id,
                    created_at=datetime.now()
                )
                
                db.add(transaction)
                saved_transactions.append(transaction)
            
            db.commit()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if len(saved_transactions) == 1:
                transaction = saved_transactions[0]
                response = (
                    f"‚úÖ –ß–µ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\n"
                    f"üí∏ –†–∞—Å—Ö–æ–¥: {abs(transaction.amount)} {transaction.currency}\n"
                    f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {transaction.description}"
                )
            else:
                total_amount = sum(abs(t.amount) for t in saved_transactions)
                currency = saved_transactions[0].currency if saved_transactions else "EUR"
                response = (
                    f"‚úÖ –ß–µ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\n"
                    f"üí∏ –û–±—â–∞—è —Å—É–º–º–∞: {total_amount} {currency}\n"
                    f"üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–æ: {len(saved_transactions)}\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stats –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."
                )
            
            await processing_message.edit_text(response)
            
        finally:
            db.close()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ —á–µ–∫–∞: {e}")
        await processing_message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤—Ä—É—á–Ω—É—é."
        )


async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ —Ñ–∞–π–ª)"""
    if not update.message.document:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    mime_type = update.message.document.mime_type
    if not mime_type or not mime_type.startswith('image/'):
        return
    
    # –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 20MB (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ OpenAI)
    if update.message.document.file_size > 20 * 1024 * 1024:
        await update.message.reply_text(
            "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20MB"
        )
        return
    
    user_id = update.effective_user.id
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_message = await update.message.reply_text(
        "üìÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–æ–∫—É–º–µ–Ω—Ç —Å —á–µ–∫–æ–º... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
    )
    
    try:
        db = get_db_session()
        try:
            user = db.query(User).filter(User.telegram_id == user_id).first()
            if not user:
                await processing_message.edit_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
                return
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            file = await update.message.document.get_file()
            image_data = await file.download_as_bytearray()
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            categories = db.query(Category).filter(Category.user_id == user.id).all()
            category_names = [cat.name for cat in categories]
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ–∫ —á–µ—Ä–µ–∑ OpenAI
            openai_service = OpenAIService()
            transactions = await openai_service.process_receipt_photo(
                bytes(image_data), 
                category_names
            )
            
            if not transactions:
                await processing_message.edit_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —á–µ–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ç–∫–æ–µ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—É–ø–∫–∞—Ö."
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ handle_photo)
            saved_transactions = []
            for transaction_data in transactions:
                # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                category = next(
                    (cat for cat in categories if cat.name == transaction_data.get('category')), 
                    categories[0] if categories else None
                )
                
                if not category:
                    # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–ü—Ä–æ—á–µ–µ" –µ—Å–ª–∏ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                    category = Category(name="–ü—Ä–æ—á–µ–µ", user_id=user.id, is_default=True)
                    db.add(category)
                    db.commit()
                
                # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                transaction = Transaction(
                    user_id=user.id,
                    amount=-abs(transaction_data['amount']),  # –†–∞—Å—Ö–æ–¥—ã –≤—Å–µ–≥–¥–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ
                    currency=transaction_data['currency'],
                    description=transaction_data['description'],
                    category_id=category.id,
                    created_at=datetime.now()
                )
                
                db.add(transaction)
                saved_transactions.append(transaction)
            
            db.commit()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if len(saved_transactions) == 1:
                transaction = saved_transactions[0]
                response = (
                    f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\n"
                    f"üí∏ –†–∞—Å—Ö–æ–¥: {abs(transaction.amount)} {transaction.currency}\n"
                    f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {transaction.description}"
                )
            else:
                total_amount = sum(abs(t.amount) for t in saved_transactions)
                currency = saved_transactions[0].currency if saved_transactions else "EUR"
                response = (
                    f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\n"
                    f"üí∏ –û–±—â–∞—è —Å—É–º–º–∞: {total_amount} {currency}\n"
                    f"üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–æ: {len(saved_transactions)}\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stats –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."
                )
            
            await processing_message.edit_text(response)
            
        finally:
            db.close()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å —á–µ–∫–æ–º: {e}")
        await processing_message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤—Ä—É—á–Ω—É—é."
        )
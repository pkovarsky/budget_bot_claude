"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
"""
import logging
from datetime import datetime, time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import pytz

from database import get_db_session, User
from utils.localization import get_message
from utils.telegram_utils import safe_edit_message, safe_answer_callback

logger = logging.getLogger(__name__)

async def notifications_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    
    db = get_db_session()
    try:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        if not user:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
            return
        
        # –°—Ç–∞—Ç—É—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫
        daily_status = "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" if user.daily_reminder_enabled else "‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ"
        budget_status = "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" if user.budget_notifications_enabled else "‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ"
        
        daily_time = user.daily_reminder_time.strftime("%H:%M") if user.daily_reminder_time else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        budget_time = user.budget_notification_time.strftime("%H:%M") if user.budget_notification_time else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        
        salary_date = f"{user.salary_date} —á–∏—Å–ª–∞" if user.salary_date else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        
        keyboard = [
            [InlineKeyboardButton("üìÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ç—Ä–∞—Ç–∞—Ö", callback_data="notif_daily")],
            [InlineKeyboardButton("üí∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±—é–¥–∂–µ—Ç–µ", callback_data="notif_budget")],
            [InlineKeyboardButton("üíµ –î–∞—Ç–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã", callback_data="notif_salary")],
            [InlineKeyboardButton("üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å", callback_data="notif_timezone")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = (
            f"üîî **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π**\n\n"
            f"üìÖ **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ç—Ä–∞—Ç–∞—Ö**: {daily_status}\n"
            f"‚è∞ –í—Ä–µ–º—è: {daily_time}\n\n"
            f"üí∞ **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±—é–¥–∂–µ—Ç–µ**: {budget_status}\n"
            f"‚è∞ –í—Ä–µ–º—è: {budget_time}\n"
            f"üìä –ß–∞—Å—Ç–æ—Ç–∞: {user.budget_notification_frequency}\n\n"
            f"üíµ **–î–∞—Ç–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã**: {salary_date}\n"
            f"üåç **–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å**: {user.timezone}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
        )
        
        await update.message.reply_text(
            message,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    finally:
        db.close()

async def handle_notifications_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    query = update.callback_query
    await safe_answer_callback(query)
    
    user_id = update.effective_user.id
    data = query.data
    
    db = get_db_session()
    try:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        if not user:
            await safe_edit_message(query, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
            return
        
        if data == "notif_daily":
            await _show_daily_reminder_settings(query, user)
        elif data == "notif_budget":
            await _show_budget_notification_settings(query, user)
        elif data == "notif_salary":
            await _show_salary_date_settings(query, user)
        elif data == "notif_timezone":
            await _show_timezone_settings(query, user)
        elif data == "notif_back":
            await _show_main_notifications_menu(query, user)
        elif data.startswith("daily_"):
            await _handle_daily_reminder_callback(query, context, user, data)
        elif data.startswith("budget_"):
            await _handle_budget_notification_callback(query, context, user, data)
        elif data.startswith("salary_"):
            await _handle_salary_date_callback(query, context, user, data)
        elif data.startswith("tz_"):
            await _handle_timezone_callback(query, context, user, data)
        
    finally:
        db.close()

async def _show_daily_reminder_settings(query, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ —Ç—Ä–∞—Ç–∞—Ö"""
    status = "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" if user.daily_reminder_enabled else "‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ"
    time_str = user.daily_reminder_time.strftime("%H:%M") if user.daily_reminder_time else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
    
    keyboard = [
        [InlineKeyboardButton(
            "üîÑ –í–∫–ª—é—á–∏—Ç—å" if not user.daily_reminder_enabled else "‚ùå –í—ã–∫–ª—é—á–∏—Ç—å",
            callback_data="daily_toggle"
        )],
        [InlineKeyboardButton("‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data="daily_time")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = (
        f"üìÖ **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞—Ç**\n\n"
        f"**–°—Ç–∞—Ç—É—Å**: {status}\n"
        f"**–í—Ä–µ–º—è**: {time_str}\n\n"
        f"–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, –±–æ—Ç –±—É–¥–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—ã –∑–∞ –¥–µ–Ω—å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è, "
        f"–µ—Å–ª–∏ –≤—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏."
    )
    
    await safe_edit_message(query, message, reply_markup=reply_markup, parse_mode='Markdown')

async def _show_budget_notification_settings(query, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –±—é–¥–∂–µ—Ç–µ"""
    status = "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" if user.budget_notifications_enabled else "‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ"
    time_str = user.budget_notification_time.strftime("%H:%M") if user.budget_notification_time else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
    
    freq_map = {
        "daily": "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ",
        "weekly": "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ",
        "none": "–í—ã–∫–ª—é—á–µ–Ω–æ"
    }
    frequency = freq_map.get(user.budget_notification_frequency, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    
    keyboard = [
        [InlineKeyboardButton(
            "üîÑ –í–∫–ª—é—á–∏—Ç—å" if not user.budget_notifications_enabled else "‚ùå –í—ã–∫–ª—é—á–∏—Ç—å",
            callback_data="budget_toggle"
        )],
        [InlineKeyboardButton("‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data="budget_time")],
        [InlineKeyboardButton("üìä –ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É", callback_data="budget_frequency")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = (
        f"üí∞ **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±—é–¥–∂–µ—Ç–µ**\n\n"
        f"**–°—Ç–∞—Ç—É—Å**: {status}\n"
        f"**–í—Ä–µ–º—è**: {time_str}\n"
        f"**–ß–∞—Å—Ç–æ—Ç–∞**: {frequency}\n\n"
        f"–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, –±–æ—Ç –±—É–¥–µ—Ç —Å–æ–æ–±—â–∞—Ç—å –≤–∞–º —Å–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –∑–∞—Ä–ø–ª–∞—Ç—ã "
        f"–ø–æ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ª–∏–º–∏—Ç–æ–º –∏ —Å–∫–æ–ª—å–∫–æ –º–æ–∂–Ω–æ —Ç—Ä–∞—Ç–∏—Ç—å –≤ –¥–µ–Ω—å.\n\n"
        f"‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –∑–∞—Ä–ø–ª–∞—Ç—ã –∏ –ª–∏–º–∏—Ç—ã –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."
    )
    
    await safe_edit_message(query, message, reply_markup=reply_markup, parse_mode='Markdown')

async def _show_salary_date_settings(query, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞—Ç—ã –∑–∞—Ä–ø–ª–∞—Ç—ã"""
    salary_date = f"{user.salary_date} —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞" if user.salary_date else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
    
    keyboard = [
        [InlineKeyboardButton("üìÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É", callback_data="salary_set")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = (
        f"üíµ **–î–∞—Ç–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã**\n\n"
        f"**–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞**: {salary_date}\n\n"
        f"–î–∞—Ç–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –±—é–¥–∂–µ—Ç–µ. "
        f"–£–∫–∞–∂–∏—Ç–µ –¥–µ–Ω—å –º–µ—Å—è—Ü–∞, –∫–æ–≥–¥–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15 –∏–ª–∏ 30)."
    )
    
    await safe_edit_message(query, message, reply_markup=reply_markup, parse_mode='Markdown')

async def _show_timezone_settings(query, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
    common_timezones = [
        ("Europe/Amsterdam", "üá≥üá± –ê–º—Å—Ç–µ—Ä–¥–∞–º (CET/CEST)"),
        ("Europe/Berlin", "üá©üá™ –ë–µ—Ä–ª–∏–Ω (CET/CEST)"),
        ("Europe/London", "üá¨üáß –õ–æ–Ω–¥–æ–Ω (GMT/BST)"),
        ("Europe/Kiev", "üá∫üá¶ –ö–∏–µ–≤ (EET/EEST)"),
        ("Europe/Moscow", "üá∑üá∫ –ú–æ—Å–∫–≤–∞ (MSK)"),
        ("America/New_York", "üá∫üá∏ –ù—å—é-–ô–æ—Ä–∫ (EST/EDT)"),
        ("Asia/Tokyo", "üáØüáµ –¢–æ–∫–∏–æ (JST)")
    ]
    
    keyboard = []
    for tz_code, tz_name in common_timezones:
        status = "‚úÖ " if user.timezone == tz_code else ""
        keyboard.append([InlineKeyboardButton(
            f"{status}{tz_name}",
            callback_data=f"tz_{tz_code}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = (
        f"üåç **–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å**\n\n"
        f"**–¢–µ–∫—É—â–∏–π**: {user.timezone}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:"
    )
    
    await safe_edit_message(query, message, reply_markup=reply_markup, parse_mode='Markdown')

async def _handle_daily_reminder_callback(query, context: ContextTypes.DEFAULT_TYPE, user: User, data: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ —Ç—Ä–∞—Ç–∞—Ö"""
    db = get_db_session()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        current_user = db.query(User).filter(User.telegram_id == user.telegram_id).first()
        if not current_user:
            return
            
        if data == "daily_toggle":
            current_user.daily_reminder_enabled = not current_user.daily_reminder_enabled
            db.commit()
            await _show_daily_reminder_settings(query, current_user)
        elif data == "daily_time":
            context.user_data['setting_daily_time'] = True
            await safe_edit_message(query,
                "‚è∞ **–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è**\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20:00)\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
                parse_mode='Markdown'
            )
    finally:
        db.close()

async def _handle_budget_notification_callback(query, context: ContextTypes.DEFAULT_TYPE, user: User, data: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –±—é–¥–∂–µ—Ç–µ"""
    db = get_db_session()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        current_user = db.query(User).filter(User.telegram_id == user.telegram_id).first()
        if not current_user:
            return
            
        if data == "budget_toggle":
            current_user.budget_notifications_enabled = not current_user.budget_notifications_enabled
            db.commit()
            await _show_budget_notification_settings(query, current_user)
        elif data == "budget_time":
            context.user_data['setting_budget_time'] = True
            await safe_edit_message(query,
                "‚è∞ **–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π**\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00)\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
                parse_mode='Markdown'
            )
        elif data == "budget_frequency":
            keyboard = [
                [InlineKeyboardButton("üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ", callback_data="budget_freq_daily")],
                [InlineKeyboardButton("üìÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ", callback_data="budget_freq_weekly")],
                [InlineKeyboardButton("‚ùå –í—ã–∫–ª—é—á–∏—Ç—å", callback_data="budget_freq_none")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await safe_edit_message(query,
                "üìä **–ß–∞—Å—Ç–æ—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –±—é–¥–∂–µ—Ç–µ**\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫ —á–∞—Å—Ç–æ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        elif data.startswith("budget_freq_"):
            frequency = data.replace("budget_freq_", "")
            current_user.budget_notification_frequency = frequency
            db.commit()
            await _show_budget_notification_settings(query, current_user)
    finally:
        db.close()

async def _handle_salary_date_callback(query, context: ContextTypes.DEFAULT_TYPE, user: User, data: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –¥–∞—Ç—ã –∑–∞—Ä–ø–ª–∞—Ç—ã"""
    if data == "salary_set":
        context.user_data['setting_salary_date'] = True
        await safe_edit_message(query,
            "üìÖ **–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞—Ç—ã –∑–∞—Ä–ø–ª–∞—Ç—ã**\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–µ–Ω—å –º–µ—Å—è—Ü–∞, –∫–æ–≥–¥–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç—É (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 31)\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã: 15, 30, 1\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
            parse_mode='Markdown'
        )

async def _handle_timezone_callback(query, context: ContextTypes.DEFAULT_TYPE, user: User, data: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
    if data.startswith("tz_"):
        timezone = data.replace("tz_", "")
        
        db = get_db_session()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
            current_user = db.query(User).filter(User.telegram_id == user.telegram_id).first()
            if not current_user:
                return
                
            current_user.timezone = timezone
            db.commit()
            await _show_timezone_settings(query, current_user)
        finally:
            db.close()

async def _show_main_notifications_menu(query, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    daily_status = "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" if user.daily_reminder_enabled else "‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ"
    budget_status = "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" if user.budget_notifications_enabled else "‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ"
    
    daily_time = user.daily_reminder_time.strftime("%H:%M") if user.daily_reminder_time else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
    budget_time = user.budget_notification_time.strftime("%H:%M") if user.budget_notification_time else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
    
    salary_date = f"{user.salary_date} —á–∏—Å–ª–∞" if user.salary_date else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
    
    keyboard = [
        [InlineKeyboardButton("üìÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ç—Ä–∞—Ç–∞—Ö", callback_data="notif_daily")],
        [InlineKeyboardButton("üí∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±—é–¥–∂–µ—Ç–µ", callback_data="notif_budget")],
        [InlineKeyboardButton("üíµ –î–∞—Ç–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã", callback_data="notif_salary")],
        [InlineKeyboardButton("üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å", callback_data="notif_timezone")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = (
        f"üîî **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π**\n\n"
        f"üìÖ **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ç—Ä–∞—Ç–∞—Ö**: {daily_status}\n"
        f"‚è∞ –í—Ä–µ–º—è: {daily_time}\n\n"
        f"üí∞ **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±—é–¥–∂–µ—Ç–µ**: {budget_status}\n"
        f"‚è∞ –í—Ä–µ–º—è: {budget_time}\n"
        f"üìä –ß–∞—Å—Ç–æ—Ç–∞: {user.budget_notification_frequency}\n\n"
        f"üíµ **–î–∞—Ç–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã**: {salary_date}\n"
        f"üåç **–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å**: {user.timezone}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
    )
    
    await safe_edit_message(query, message, reply_markup=reply_markup, parse_mode='Markdown')

async def handle_time_input(update: Update, context: ContextTypes.DEFAULT_TYPE, setting_type: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    user_id = update.effective_user.id
    text = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É
    if text.lower() in ['/cancel', '–æ—Ç–º–µ–Ω–∞', 'cancel']:
        context.user_data.pop(f'setting_{setting_type}_time', None)
        await update.message.reply_text("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏
    try:
        time_obj = datetime.strptime(text, "%H:%M").time()
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20:00)"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    db = get_db_session()
    try:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        if not user:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
            return
        
        if setting_type == "daily":
            user.daily_reminder_time = time_obj
            message = f"‚úÖ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {text}"
        elif setting_type == "budget":
            user.budget_notification_time = time_obj
            message = f"‚úÖ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –±—é–¥–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {text}"
        
        db.commit()
        context.user_data.pop(f'setting_{setting_type}_time', None)
        
        await update.message.reply_text(message)
        
    finally:
        db.close()

async def handle_salary_date_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –∑–∞—Ä–ø–ª–∞—Ç—ã"""
    user_id = update.effective_user.id
    text = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É
    if text.lower() in ['/cancel', '–æ—Ç–º–µ–Ω–∞', 'cancel']:
        context.user_data.pop('setting_salary_date', None)
        await update.message.reply_text("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞—Ç—ã –∑–∞—Ä–ø–ª–∞—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã
    try:
        day = int(text)
        if day < 1 or day > 31:
            raise ValueError("–î–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 31")
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 31"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã
    db = get_db_session()
    try:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        if not user:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
            return
        
        user.salary_date = day
        db.commit()
        context.user_data.pop('setting_salary_date', None)
        
        await update.message.reply_text(f"‚úÖ –î–∞—Ç–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {day} —á–∏—Å–ª–æ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞")
        
    finally:
        db.close()


async def notifications_command_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /notifications —á–µ—Ä–µ–∑ callback"""
    query = update.callback_query
    await safe_answer_callback(query)
    
    user_id = update.effective_user.id
    
    db = get_db_session()
    try:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        if not user:
            await safe_edit_message(query, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        daily_status = "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" if user.daily_reminder_enabled else "‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ"
        daily_time = user.daily_reminder_time.strftime("%H:%M") if user.daily_reminder_time else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        
        budget_status = "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" if user.budget_notifications_enabled else "‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ"
        budget_time = user.budget_notification_time.strftime("%H:%M") if user.budget_notification_time else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        
        keyboard = [
            [InlineKeyboardButton("üìÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ç—Ä–∞—Ç–∞—Ö", callback_data="notif_daily")],
            [InlineKeyboardButton("üí∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±—é–¥–∂–µ—Ç–µ", callback_data="notif_budget")],
            [InlineKeyboardButton("üíµ –î–∞—Ç–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã", callback_data="notif_salary")],
            [InlineKeyboardButton("üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å", callback_data="notif_timezone")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = (
            f"üîî **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π**\n\n"
            f"üìÖ **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ç—Ä–∞—Ç–∞—Ö**: {daily_status}\n"
            f"‚è∞ –í—Ä–µ–º—è: {daily_time}\n\n"
            f"üí∞ **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±—é–¥–∂–µ—Ç–µ**: {budget_status}\n"
            f"‚è∞ –í—Ä–µ–º—è: {budget_time}\n"
            f"üìä –ß–∞—Å—Ç–æ—Ç–∞: {user.budget_notification_frequency}\n\n"
            f"üíµ **–î–∞—Ç–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã**: {user.salary_date} —á–∏—Å–ª–∞\n"
            f"üåç **–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å**: {user.timezone}\n\n"
            f"–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤."
        )
        
        await safe_edit_message(query, message, reply_markup=reply_markup, parse_mode='Markdown')
        
    finally:
        db.close()
import logging
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from database import get_db_session, User, Category, Transaction, Limit
from openai_service import OpenAIService
from utils.parsers import parse_transaction
from utils.localization import get_message

logger = logging.getLogger(__name__)


class EnhancedTransactionHandler:
    def __init__(self):
        self.openai_service = OpenAIService()

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º UI"""
        # –ï—Å–ª–∏ –∂–¥–µ–º –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if context.user_data.get('waiting_for_category'):
            await self.handle_new_category(update, context)
            return
            
        # –ï—Å–ª–∏ –∂–¥–µ–º –≤–≤–æ–¥–∞ –ª–∏–º–∏—Ç–∞
        if context.user_data.get('waiting_for_limit'):
            await self.handle_new_limit(update, context)
            return
            
        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É–º–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        if context.user_data.get('editing_transaction'):
            from handlers.edit_handler import handle_new_amount
            await handle_new_amount(update, context)
            return
            
        # –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è
        if context.user_data.get('setting_name'):
            from handlers.settings_handler import handle_name_input
            await handle_name_input(update, context)
            return
            
        text = update.message.text.strip()
        user_id = update.effective_user.id
        
        db = get_db_session()
        try:
            user = db.query(User).filter(User.telegram_id == user_id).first()
            if not user:
                await update.message.reply_text(get_message("start_first", "ru"))
                return
            
            # –ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏—è
            transaction_data = parse_transaction(text)
            if not transaction_data:
                await update.message.reply_text(
                    f"{get_message('transaction_error', user.language)}\n\n"
                    f"{get_message('transaction_format_help', user.language)}\n"
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.",
                    parse_mode='Markdown'
                )
                return
            
            amount, currency, description, is_income = transaction_data
            
            # –£–¥–∞–ª—è–µ–º RUB –∏–∑ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –≤–∞–ª—é—Ç
            if currency == 'RUB':
                await update.message.reply_text(
                    f"‚ùå –í–∞–ª—é—Ç–∞ RUB –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.\n"
                    f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã: {get_message('supported_currencies', user.language)}",
                    parse_mode='Markdown'
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–µ—Ä–µ–∑ OpenAI
            suggested_category = await self._suggest_category(description, user.id, db)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
            context.user_data['pending_transaction'] = {
                'amount': amount,
                'currency': currency,
                'description': description,
                'is_income': is_income,
                'user_id': user.id
            }
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            await self._show_category_selection(update, suggested_category, user, db)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await update.message.reply_text(get_message("error_occurred", user.language if 'user' in locals() else "ru"))
        finally:
            db.close()

    async def _suggest_category(self, description: str, user_id: int, db) -> str:
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–æ–º–æ—â—å—é OpenAI"""
        categories = db.query(Category).filter(Category.user_id == user_id).all()
        
        if not categories:
            return "–ü—Ä–æ—á–µ–µ"  # Fallback
        
        category_names = [cat.name for cat in categories]
        
        try:
            suggested_category = await self.openai_service.categorize_transaction(
                description, category_names
            )
            return suggested_category
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ OpenAI: {e}")
            return "–ü—Ä–æ—á–µ–µ"

    async def _show_category_selection(self, update: Update, suggested_category: str, user, db):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        categories = db.query(Category).filter(Category.user_id == user.id).all()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        keyboard = []
        
        # –ü–µ—Ä–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –∏–¥–µ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        if suggested_category and suggested_category != "–ü—Ä–æ—á–µ–µ":
            keyboard.append([InlineKeyboardButton(
                f"‚úÖ {suggested_category} (–ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è)", 
                callback_data=f"select_cat_{suggested_category}"
            )])
        
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for category in categories:
            if category.name != suggested_category:
                keyboard.append([InlineKeyboardButton(
                    f"üìÅ {category.name}", 
                    callback_data=f"select_cat_{category.name}"
                )])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
        message_text = (
            f"{get_message('suggest_category', user.language, category=suggested_category)}\n\n"
            f"{get_message('category_question', user.language)}"
        )
        
        await update.message.reply_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def handle_category_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        query = update.callback_query
        await query.answer()
        
        if not context.user_data.get('pending_transaction'):
            await query.edit_message_text("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        transaction_data = context.user_data['pending_transaction']
        category_name = query.data.replace('select_cat_', '')
        
        db = get_db_session()
        try:
            user = db.query(User).filter(User.telegram_id == query.from_user.id).first()
            
            # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            category = db.query(Category).filter(
                Category.user_id == transaction_data['user_id'],
                Category.name == category_name
            ).first()
            
            if not category:
                await query.edit_message_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
            
            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            transaction = Transaction(
                user_id=transaction_data['user_id'],
                amount=transaction_data['amount'] if transaction_data['is_income'] else -transaction_data['amount'],
                currency=transaction_data['currency'],
                description=transaction_data['description'],
                category_id=category.id,
                created_at=datetime.now()
            )
            
            db.add(transaction)
            db.commit()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤
            warning_msg = ""
            if not transaction_data['is_income']:
                warning_msg = await self._check_limits(
                    transaction_data['user_id'], 
                    category.id, 
                    abs(transaction_data['amount']), 
                    transaction_data['currency'], 
                    db
                )
            
            # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            name = user.name or "–¥—Ä—É–≥"
            operation_type = get_message("income_added", user.language) if transaction_data['is_income'] else get_message("expense_added", user.language)
            
            response_text = (
                f"‚úÖ {operation_type}\n\n"
                f"üë§ {name}, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:\n"
                f"{get_message('amount', user.language)}: {transaction_data['amount']} {transaction_data['currency']}\n"
                f"{get_message('category', user.language)}: {category.name}\n"
                f"{get_message('description', user.language)}: {transaction_data['description']}\n"
                f"{warning_msg}"
            )
            
            await query.edit_message_text(response_text, parse_mode='Markdown')
            
        finally:
            db.close()
            context.user_data.pop('pending_transaction', None)

    async def _check_limits(self, user_id: int, category_id: int, amount: float, currency: str, db) -> str:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ —Ä–∞—Å—Ö–æ–¥–æ–≤"""
        limits = db.query(Limit).filter(
            Limit.user_id == user_id,
            Limit.category_id == category_id
        ).all()
        
        warning_messages = []
        
        for limit in limits:
            if limit.currency != currency:
                continue
                
            # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            current_month_start = datetime.now().replace(day=1, hour=0, minute=0, second=0, microsecond=0)
            
            month_expenses = db.query(Transaction).filter(
                Transaction.user_id == user_id,
                Transaction.category_id == category_id,
                Transaction.currency == currency,
                Transaction.amount < 0,
                Transaction.created_at >= current_month_start
            ).all()
            
            total_spent = sum(abs(transaction.amount) for transaction in month_expenses)
            total_spent += amount  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ç—Ä–∞—Ç—É
            
            if total_spent > limit.amount:
                category = db.query(Category).filter(Category.id == category_id).first()
                warning_messages.append(
                    f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category.name}': "
                    f"{total_spent:.2f}/{limit.amount:.2f} {currency}"
                )
            elif total_spent > limit.amount * 0.8:  # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ 80%
                category = db.query(Category).filter(Category.id == category_id).first()
                warning_messages.append(
                    f"üîî –ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ –ª–∏–º–∏—Ç—É '{category.name}': "
                    f"{total_spent:.2f}/{limit.amount:.2f} {currency}"
                )
        
        return "\n".join(warning_messages)

    async def handle_new_category(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        category_name = update.message.text.strip()
        user_id = update.effective_user.id
        
        if len(category_name) > 50:
            await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤).")
            return
        
        db = get_db_session()
        try:
            user = db.query(User).filter(User.telegram_id == user_id).first()
            if not user:
                await update.message.reply_text(get_message("start_first", user.language if user else "ru"))
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
            existing_category = db.query(Category).filter(
                Category.user_id == user.id,
                Category.name == category_name
            ).first()
            
            if existing_category:
                await update.message.reply_text(
                    get_message("category_exists", user.language, name=category_name)
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            new_category = Category(name=category_name, user_id=user.id, is_default=False)
            db.add(new_category)
            db.commit()
            
            await update.message.reply_text(
                get_message("category_added", user.language, name=category_name)
            )
            
        finally:
            db.close()
            context.user_data['waiting_for_category'] = None

    async def handle_new_limit(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –ª–∏–º–∏—Ç–∞"""
        from utils.parsers import parse_amount_and_currency
        
        text = update.message.text.strip()
        user_id = update.effective_user.id
        category_id = context.user_data.get('waiting_for_limit')
        
        # –ü–∞—Ä—Å–∏–Ω–≥ —Å—É–º–º—ã –∏ –≤–∞–ª—é—Ç—ã
        result = parse_amount_and_currency(text)
        if not result:
            await update.message.reply_text(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –∏ –≤–∞–ª—é—Ç—É, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
                "`500 EUR` –∏–ª–∏ `300 USD`",
                parse_mode='Markdown'
            )
            return
        
        amount, currency = result
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ RUB
        if currency == 'RUB':
            await update.message.reply_text(
                "‚ùå –í–∞–ª—é—Ç–∞ RUB –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.\n"
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã: EUR, USD",
                parse_mode='Markdown'
            )
            return
        
        if amount <= 0:
            await update.message.reply_text("–°—É–º–º–∞ –ª–∏–º–∏—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
            return
        
        db = get_db_session()
        try:
            user = db.query(User).filter(User.telegram_id == user_id).first()
            if not user:
                await update.message.reply_text(get_message("start_first", user.language if user else "ru"))
                return
            
            category = db.query(Category).filter(
                Category.id == category_id,
                Category.user_id == user.id
            ).first()
            
            if not category:
                await update.message.reply_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –ª–∏–º–∏—Ç–∞ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            existing_limit = db.query(Limit).filter(
                Limit.user_id == user.id,
                Limit.category_id == category_id,
                Limit.currency == currency
            ).first()
            
            if existing_limit:
                await update.message.reply_text("–î–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏–º–∏—Ç –≤ –¥–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç–µ.")
                return
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç
            limit = Limit(
                user_id=user.id,
                category_id=category_id,
                amount=amount,
                currency=currency
            )
            
            db.add(limit)
            db.commit()
            
            name = user.name or "–¥—Ä—É–≥"
            await update.message.reply_text(
                f"‚úÖ {name}, –ª–∏–º–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}\n"
                f"–õ–∏–º–∏—Ç: {amount} {currency}",
                parse_mode='Markdown'
            )
            
        finally:
            db.close()
            context.user_data['waiting_for_limit'] = None
import logging
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from database import get_db_session, User, Category, Subcategory, Transaction, Limit, Balance
from services.openai_service import OpenAIService
from services.category_memory_service import CategoryMemoryService
from utils.parsers import parse_transaction
from utils.localization import get_message
from services.emoji_service import EmojiService
from services.balance_service import BalanceService

logger = logging.getLogger(__name__)


class EnhancedTransactionHandler:
    def __init__(self):
        self.openai_service = OpenAIService()
        self.memory_service = CategoryMemoryService()
        self.balance_service = BalanceService()
    
    def _is_cancel_command(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É –æ—Ç–º–µ–Ω—ã"""
        return text.strip().lower() in ['/cancel', '–æ—Ç–º–µ–Ω–∞', 'cancel']
    
    async def _handle_cancel_operation(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                     context_key: str, message: str) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        context.user_data.pop(context_key, None)
        await update.message.reply_text(
            f"‚ùå {message}",
            reply_markup=None
        )
    
    async def _get_user_from_telegram_id(self, telegram_id: int) -> User:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id"""
        db = get_db_session()
        try:
            user = db.query(User).filter(User.telegram_id == telegram_id).first()
            return user
        finally:
            db.close()
    
    def _get_main_menu_keyboard(self) -> InlineKeyboardMarkup:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]]
        return InlineKeyboardMarkup(keyboard)
    
    def _get_emoji_with_fallback(self, obj, fallback: str = "üìÅ") -> str:
        """–ü–æ–ª—É—á–∏—Ç—å emoji —Å fallback –∑–Ω–∞—á–µ–Ω–∏–µ–º"""
        return obj.emoji if hasattr(obj, 'emoji') and obj.emoji else fallback
    
    def _calculate_limit_period(self, limit: Limit) -> tuple:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ª–∏–º–∏—Ç–∞"""
        if limit.period == 'weekly':
            # –ù–µ–¥–µ–ª—è - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            period_start = datetime.now() - timedelta(days=7)
            period_text = "–Ω–µ–¥–µ–ª—é"
        elif limit.period == 'custom' and hasattr(limit, 'end_date') and limit.end_date:
            # –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø–µ—Ä–∏–æ–¥ - –æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–º–∏—Ç–∞ –¥–æ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã
            period_start = limit.created_at if hasattr(limit, 'created_at') else datetime.now().replace(day=1, hour=0, minute=0, second=0, microsecond=0)
            period_text = f"–¥–æ {limit.end_date.strftime('%d.%m.%Y')}"
        else:
            # –ú–µ—Å—è—Ü - —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
            period_start = datetime.now().replace(day=1, hour=0, minute=0, second=0, microsecond=0)
            period_text = "–º–µ—Å—è—Ü"
        
        return period_start, period_text
    
    def _create_category_keyboard(self, categories: list, suggested_category: str = None) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        keyboard = []
        
        # –ü–µ—Ä–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –∏–¥–µ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        if suggested_category:
            # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –ø–µ—Ä–≤–æ–π
            suggested_cat_obj = None
            for cat in categories:
                if cat.name == suggested_category:
                    suggested_cat_obj = cat
                    break
            
            if suggested_cat_obj:
                suggested_emoji = self._get_emoji_with_fallback(suggested_cat_obj)
                keyboard.append([InlineKeyboardButton(
                    f"‚úÖ {suggested_emoji} {suggested_category} (–ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è)", 
                    callback_data=f"select_cat_{suggested_category}"
                )])
        
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for category in categories:
            if category.name != suggested_category:
                emoji = self._get_emoji_with_fallback(category)
                keyboard.append([InlineKeyboardButton(
                    f"{emoji} {category.name}", 
                    callback_data=f"select_cat_{category.name}"
                )])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard.append([InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="create_new_category")])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="select_cancel")])
        
        return InlineKeyboardMarkup(keyboard)
    
    def _create_subcategory_keyboard(self, subcategories: list, suggested_subcategory: str = None) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        keyboard.append([InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="subcat_skip")])
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è
        if suggested_subcategory:
            keyboard.append([InlineKeyboardButton(
                f"‚úÖ {suggested_subcategory} (–ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è)", 
                callback_data=f"select_subcat_{suggested_subcategory}"
            )])
        
        # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for subcategory in subcategories:
            if not suggested_subcategory or subcategory.name != suggested_subcategory:
                emoji = self._get_emoji_with_fallback(subcategory, "üìÇ")
                keyboard.append([InlineKeyboardButton(
                    f"{emoji} {subcategory.name}", 
                    callback_data=f"select_subcat_{subcategory.name}"
                )])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard.append([InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="create_new_subcategory")])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="subcat_back")])
        
        return InlineKeyboardMarkup(keyboard)
    
    def _create_emoji_keyboard(self, suggested_emoji: str, category_name: str, 
                             callback_prefix: str = "emoji_select") -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–º–∞–π–ª–∏–∫–æ–≤"""
        emoji_service = EmojiService()
        keyboard = []
        
        # –ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞ - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å–º–∞–π–ª–∏–∫
        keyboard.append([InlineKeyboardButton(
            f"‚úÖ {suggested_emoji} (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)", 
            callback_data=f"{callback_prefix}_{suggested_emoji}"
        )])
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–º–∞–π–ª–∏–∫–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        emoji_keyboard = emoji_service.get_emoji_keyboard_for_category(category_name)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–º–∞–π–ª–∏–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        for emoji_row in emoji_keyboard:
            button_row = []
            for emoji in emoji_row:
                if emoji != suggested_emoji:
                    button_row.append(InlineKeyboardButton(
                        emoji, 
                        callback_data=f"{callback_prefix}_{emoji}"
                    ))
            if button_row:
                keyboard.append(button_row)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        more_callback = "more_emojis" if callback_prefix == "emoji_select" else "subcat_more_emojis"
        default_callback = f"{callback_prefix}_üìÅ" if callback_prefix == "emoji_select" else f"{callback_prefix}_üìÇ"
        back_callback = "back_to_name" if callback_prefix == "emoji_select" else "subcat_back_to_name"
        
        keyboard.append([
            InlineKeyboardButton("üìÇ –ë–æ–ª—å—à–µ —Å–º–∞–π–ª–∏–∫–æ–≤", callback_data=more_callback),
            InlineKeyboardButton("üìÅ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é", callback_data=default_callback)
        ])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=back_callback)])
        
        return InlineKeyboardMarkup(keyboard)
    
    async def _create_and_process_transaction(self, transaction_data: dict, category: Category, 
                                            subcategory: Subcategory = None, db=None) -> tuple:
        """–°–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –µ—ë"""
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction = Transaction(
            user_id=transaction_data['user_id'],
            amount=transaction_data['amount'] if transaction_data['is_income'] else -transaction_data['amount'],
            currency=transaction_data['currency'],
            description=transaction_data['description'],
            category_id=category.id,
            subcategory_id=subcategory.id if subcategory else None,
            created_at=datetime.now()
        )
        
        db.add(transaction)
        db.commit()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤
        balance = None
        if not transaction_data['is_income']:
            balance = self.balance_service.subtract_expense(
                transaction_data['user_id'], 
                transaction_data['amount'], 
                transaction_data['currency']
            )
        
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–≤—è–∑—å –æ–ø–∏—Å–∞–Ω–∏—è —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –¥–ª—è –±—É–¥—É—â–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        self.memory_service.remember_category(
            user_id=transaction_data['user_id'],
            description=transaction_data['description'],
            category_id=category.id,
            confidence=1.0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤
        warning_msg = ""
        limit_exceeded = False
        limit_info = ""
        if not transaction_data['is_income']:
            warning_msg, limit_exceeded = await self._check_limits(
                transaction_data['user_id'], 
                category.id, 
                abs(transaction_data['amount']), 
                transaction_data['currency'], 
                db
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            limit_info = await self._get_limit_info(
                transaction_data['user_id'], 
                category.id, 
                transaction_data['currency'], 
                db
            )
        
        return balance, warning_msg, limit_exceeded, limit_info
    
    def _format_transaction_response(self, transaction_data: dict, category: Category, 
                                   subcategory: Subcategory, user: User, balance=None, 
                                   limit_info: str = "", new_category: bool = False) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        name = user.name or "–±—Ä–æ"
        operation_type = get_message("income_added", user.language) if transaction_data['is_income'] else get_message("expense_added", user.language)
        
        category_emoji = self._get_emoji_with_fallback(category)
        category_text = f"{category_emoji} {category.name}"
        
        if subcategory:
            subcategory_emoji = self._get_emoji_with_fallback(subcategory, "üìÇ")
            category_text += f" ‚Üí {subcategory_emoji} {subcategory.name}"
        
        # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        response_text = f"‚úÖ {operation_type}\n\n"
        
        if new_category:
            response_text += f"üÜï –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_emoji} {category.name}\n\n"
        
        response_text += (
            f"üë§ {name}, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:\n"
            f"{get_message('amount', user.language)}: {transaction_data['amount']} {transaction_data['currency']}\n"
            f"{get_message('category', user.language)}: {category_text}\n"
            f"{get_message('description', user.language)}: {transaction_data['description']}"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤
        if balance:
            balance_emoji = "üí∞" if balance.amount >= 0 else "üí∏"
            response_text += f"\n\n{balance_emoji} **–û–±—â–∏–π –±–∞–ª–∞–Ω—Å:** {balance.amount:.2f} {balance.currency}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–µ
        if limit_info:
            response_text += f"\n{limit_info}"
        
        return response_text

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º UI"""
        # –ï—Å–ª–∏ –∂–¥–µ–º –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if context.user_data.get('waiting_for_category'):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç–º–µ–Ω—É
            if self._is_cancel_command(update.message.text):
                await self._handle_cancel_operation(update, context, 'waiting_for_category', 
                                                   "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
                return
            await self.handle_new_category(update, context)
            return
            
        # –ï—Å–ª–∏ –∂–¥–µ–º –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑ –º–µ–Ω—é)
        if context.user_data.get('waiting_for_category_name'):
            await self.handle_category_name_input(update, context)
            return
            
        # –ï—Å–ª–∏ –∂–¥–µ–º –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if context.user_data.get('waiting_for_subcategory_name'):
            await self.handle_subcategory_name_input(update, context)
            return
            
        # –ï—Å–ª–∏ –∂–¥–µ–º –≤–≤–æ–¥–∞ –ª–∏–º–∏—Ç–∞
        if context.user_data.get('waiting_for_limit'):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç–º–µ–Ω—É
            if self._is_cancel_command(update.message.text):
                await self._handle_cancel_operation(update, context, 'waiting_for_limit', 
                                                   "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–∏–º–∏—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                context.user_data.pop('limit_category_id', None)
                return
            await self.handle_new_limit(update, context)
            return
            
        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É–º–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        if context.user_data.get('editing_transaction'):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç–º–µ–Ω—É
            if self._is_cancel_command(update.message.text):
                await self._handle_cancel_operation(update, context, 'editing_transaction', 
                                                   "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
                return
            from handlers.edit_handler import handle_new_amount
            await handle_new_amount(update, context)
            return
            
        # –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è –ø—Ä–∏ –ø–µ—Ä–≤–∏—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
        if context.user_data.get('setting_up_name'):
            from handlers.start_handler import handle_name_input_setup
            await handle_name_input_setup(update, context)
            return
        
        # –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        if context.user_data.get('setting_name'):
            from handlers.settings_handler import handle_name_input
            await handle_name_input(update, context)
            return
        
        # –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        if context.user_data.get('setting_daily_time'):
            from handlers.notifications_handler import handle_time_input
            await handle_time_input(update, context, 'daily')
            return
        
        # –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –±—é–¥–∂–µ—Ç–µ
        if context.user_data.get('setting_budget_time'):
            from handlers.notifications_handler import handle_time_input
            await handle_time_input(update, context, 'budget')
            return
        
        # –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –∑–∞—Ä–ø–ª–∞—Ç—ã
        if context.user_data.get('setting_salary_date'):
            from handlers.notifications_handler import handle_salary_date_input
            await handle_salary_date_input(update, context)
            return
        
        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ª–∏–º–∏—Ç
        if context.user_data.get('editing_limit'):
            await self.handle_limit_edit_input(update, context)
            return
            
        text = update.message.text.strip()
        user_id = update.effective_user.id
        
        db = get_db_session()
        try:
            user = db.query(User).filter(User.telegram_id == user_id).first()
            if not user:
                await update.message.reply_text(get_message("start_first", "ru"))
                return
            
            # –ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏—è
            transaction_data = parse_transaction(text)
            if not transaction_data:
                await update.message.reply_text(
                    f"{get_message('transaction_error', user.language)}\n\n"
                    f"{get_message('transaction_format_help', user.language)}\n"
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.",
                    parse_mode='Markdown'
                )
                return
            
            amount, currency, description, is_income = transaction_data

            
            # –î–ª—è –¥–æ—Ö–æ–¥–æ–≤ (—Å +) –Ω–µ –Ω—É–∂–µ–Ω –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - –¥–æ–±–∞–≤–ª—è–µ–º –∫ –±–∞–ª–∞–Ω—Å—É
            if is_income:
                # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–æ—Ö–æ–¥–∞ (–±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
                transaction = Transaction(
                    user_id=user.id,
                    category_id=None,  # –î–æ—Ö–æ–¥—ã –Ω–µ –∏–º–µ—é—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    amount=amount,  # –î–ª—è –¥–æ—Ö–æ–¥–æ–≤ amount —É–∂–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π
                    currency=currency,
                    description=description
                )
                db.add(transaction)
                db.commit()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫ –±–∞–ª–∞–Ω—Å—É
                balance = self.balance_service.add_income(user.id, amount, currency)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ—Ö–æ–¥–∞
                name = user.name or "–±—Ä–æ"
                keyboard = self._get_main_menu_keyboard()
                await update.message.reply_text(
                    f"‚úÖ {name}, –¥–æ—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω –∫ –±–∞–ª–∞–Ω—Å—É!\n\n"
                    f"üí∞ **{description}**\n"
                    f"üíµ –°—É–º–º–∞: +{amount} {currency}\n"
                    f"üí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance.amount} {currency}",
                    reply_markup=keyboard,
                    parse_mode='Markdown'
                )
                return
            
            # –î–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–µ—Ä–µ–∑ OpenAI
            suggested_category = await self._suggest_category(description, user.id, db)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
            context.user_data['pending_transaction'] = {
                'amount': amount,
                'currency': currency,
                'description': description,
                'is_income': is_income,
                'user_id': user.id
            }
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            await self._show_category_selection(update, suggested_category, user, db)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await update.message.reply_text(get_message("error_occurred", user.language if 'user' in locals() else "ru"))
        finally:
            db.close()

    async def _suggest_category(self, description: str, user_id: int, db) -> str:
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–æ–º–æ—â—å—é OpenAI"""
        categories = db.query(Category).filter(Category.user_id == user_id).all()
        
        if not categories:
            return "–ü—Ä–æ—á–µ–µ"  # Fallback
        
        category_names = [cat.name for cat in categories]
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å
        memory_suggestion = self.memory_service.suggest_category(user_id, description)
        if memory_suggestion and memory_suggestion.get('confidence', 0) >= 0.8:
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ –≤ –ø–∞–º—è—Ç–∏: {memory_suggestion['category_name']} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {memory_suggestion['confidence']:.2f})")
            return memory_suggestion['category_name']
        
        # –ï—Å–ª–∏ –≤ –ø–∞–º—è—Ç–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º OpenAI
        try:
            suggested_category = await self.openai_service.categorize_transaction(
                description, category_names
            )
            logger.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∞ —á–µ—Ä–µ–∑ OpenAI: {suggested_category}")
            return suggested_category
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ OpenAI: {e}")
            return "–ü—Ä–æ—á–µ–µ"

    async def _show_category_selection(self, update: Update, suggested_category: str, user, db):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        categories = db.query(Category).filter(Category.user_id == user.id).all()
        reply_markup = self._create_category_keyboard(categories, suggested_category)
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
        message_text = (
            f"{get_message('suggest_category', user.language, category=suggested_category)}\n\n"
            f"{get_message('category_question', user.language)}"
        )
        
        await update.message.reply_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def handle_category_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "select_cancel":
            context.user_data.pop('pending_transaction', None)
            await query.edit_message_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return
        
        if query.data == "create_new_category":
            await self._start_category_creation(query, context)
            return

        if not context.user_data.get('pending_transaction'):
            await query.edit_message_text("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        transaction_data = context.user_data['pending_transaction']
        category_name = query.data.replace('select_cat_', '')
        
        db = get_db_session()
        try:
            user = db.query(User).filter(User.telegram_id == query.from_user.id).first()
            
            # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            category = db.query(Category).filter(
                Category.user_id == transaction_data['user_id'],
                Category.name == category_name
            ).first()
            
            if not category:
                await query.edit_message_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            context.user_data['selected_category'] = category.id
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            subcategories = db.query(Subcategory).filter(
                Subcategory.category_id == category.id,
                Subcategory.user_id == user.id
            ).all()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            await self._show_subcategory_selection(query, category, subcategories, transaction_data['description'], user, db)
            
        finally:
            db.close()

    async def _show_subcategory_selection(self, query, category, subcategories, description, user, db):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—É—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–µ—Ä–µ–∑ OpenAI
        suggested_subcategory = await self._suggest_subcategory(description, category.id, user.id, db)
        reply_markup = self._create_subcategory_keyboard(subcategories, suggested_subcategory)
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
        category_emoji = self._get_emoji_with_fallback(category)
        message_text = (
            f"üìÇ **–í—ã–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è {category_emoji} {category.name}**\n\n"
        )
        
        if suggested_subcategory:
            message_text += f"üí° –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {suggested_subcategory}\n\n"
        
        message_text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥:"
        
        await query.edit_message_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def _suggest_subcategory(self, description: str, category_id: int, user_id: int, db) -> str:
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–æ–º–æ—â—å—é OpenAI"""
        subcategories = db.query(Subcategory).filter(
            Subcategory.category_id == category_id,
            Subcategory.user_id == user_id
        ).all()
        
        if not subcategories:
            return None
        
        subcategory_names = [subcat.name for subcat in subcategories]
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            category = db.query(Category).filter(Category.id == category_id).first()
            category_name = category.name if category else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è"
            
            suggested_subcategory = await self.openai_service.categorize_subcategory(
                description, category_name, subcategory_names
            )
            return suggested_subcategory
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ OpenAI: {e}")
            return None

    async def _check_limits(self, user_id: int, category_id: int, amount: float, currency: str, db) -> tuple[str, bool]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ —Ä–∞—Å—Ö–æ–¥–æ–≤. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (warning_message, is_limit_exceeded)"""
        limits = db.query(Limit).filter(
            Limit.user_id == user_id,
            Limit.category_id == category_id
        ).all()
        
        warning_messages = []
        limit_exceeded = False
        
        for limit in limits:
            if limit.currency != currency:
                continue
                
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
            period_start, period_text = self._calculate_limit_period(limit)
            
            period_expenses = db.query(Transaction).filter(
                Transaction.user_id == user_id,
                Transaction.category_id == category_id,
                Transaction.currency == currency,
                Transaction.amount < 0,
                Transaction.created_at >= period_start
            ).all()
            
            total_spent = sum(abs(transaction.amount) for transaction in period_expenses)
            total_spent += amount  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ç—Ä–∞—Ç—É
            
            category = db.query(Category).filter(Category.id == category_id).first()
            
            if total_spent > limit.amount:
                limit_exceeded = True
                warning_messages.append(
                    f"üö® **–ü–†–ï–í–´–®–ï–ù –õ–ò–ú–ò–¢!** üö®\n"
                    f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}\n"
                    f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {total_spent:.2f}/{limit.amount:.2f} {currency}\n"
                    f"–ü–µ—Ä–∏–æ–¥: {period_text}"
                )
            elif total_spent > limit.amount * 0.8:  # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ 80%
                warning_messages.append(
                    f"üîî –ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ –ª–∏–º–∏—Ç—É '{category.name}': "
                    f"{total_spent:.2f}/{limit.amount:.2f} {currency} –∑–∞ {period_text}"
                )
        
        return "\n".join(warning_messages), limit_exceeded
    
    async def _get_limit_info(self, user_id: int, category_id: int, currency: str, db) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        limits = db.query(Limit).filter(
            Limit.user_id == user_id,
            Limit.category_id == category_id,
            Limit.currency == currency
        ).all()
        
        if not limits:
            return ""
        
        limit_info_lines = []
        
        for limit in limits:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
            period_start, period_text = self._calculate_limit_period(limit)
            
            # –°—á–∏—Ç–∞–µ–º –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ
            period_expenses = db.query(Transaction).filter(
                Transaction.user_id == user_id,
                Transaction.category_id == category_id,
                Transaction.currency == currency,
                Transaction.amount < 0,
                Transaction.created_at >= period_start
            ).all()
            
            total_spent = sum(abs(transaction.amount) for transaction in period_expenses)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–µ
            limit_emoji = "üí≥"
            if total_spent > limit.amount:
                limit_emoji = "üö®"
            elif total_spent > limit.amount * 0.8:
                limit_emoji = "‚ö†Ô∏è"
            
            limit_info_lines.append(
                f"{limit_emoji} **–õ–∏–º–∏—Ç ({period_text}):** {total_spent:.2f}/{limit.amount:.2f} {currency}"
            )
        
        return "\n" + "\n".join(limit_info_lines) if limit_info_lines else ""

    async def handle_subcategory_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "subcat_back":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            context.user_data.pop('selected_category', None)
            
            transaction_data = context.user_data.get('pending_transaction')
            if transaction_data:
                db = get_db_session()
                try:
                    user = db.query(User).filter(User.telegram_id == query.from_user.id).first()
                    if user:
                        suggested_category = await self._suggest_category(transaction_data['description'], user.id, db)
                        await self._show_category_selection_from_query(query, suggested_category, user, db)
                        return
                finally:
                    db.close()
            
            await query.edit_message_text("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞.")
            return
        
        if query.data == "create_new_subcategory":
            await self._start_subcategory_creation(query, context)
            return
        
        if query.data == "subcat_skip":
            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –±–µ–∑ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            await self._create_transaction_final(query, context, None)
            return
        
        if query.data.startswith("select_subcat_"):
            subcategory_name = query.data.replace("select_subcat_", "")
            await self._create_transaction_final(query, context, subcategory_name)
            return

    async def _show_category_selection_from_query(self, query, suggested_category: str, user, db):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∏–∑ callback query)"""
        categories = db.query(Category).filter(Category.user_id == user.id).all()
        reply_markup = self._create_category_keyboard(categories, suggested_category)
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
        message_text = (
            f"{get_message('suggest_category', user.language, category=suggested_category)}\n\n"
            f"{get_message('category_question', user.language)}"
        )
        
        await query.edit_message_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def _start_subcategory_creation(self, query, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        context.user_data['waiting_for_subcategory_name'] = True
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        selected_category_id = context.user_data.get('selected_category')
        if not selected_category_id:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.")
            return
        
        db = get_db_session()
        try:
            category = db.query(Category).filter(Category.id == selected_category_id).first()
            if not category:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
            
            category_emoji = category.emoji if hasattr(category, 'emoji') and category.emoji else "üìÅ"
            await query.edit_message_text(
                f"üè∑Ô∏è **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏**\n\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_emoji} {category.name}\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n"
                f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤\n"
                f"‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –≤ —Ä–∞–º–∫–∞—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n\n"
                f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
                parse_mode='Markdown'
            )
        finally:
            db.close()

    async def handle_subcategory_name_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        subcategory_name = update.message.text.strip()
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É
        if self._is_cancel_command(subcategory_name):
            context.user_data.pop('waiting_for_subcategory_name', None)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤—ã–±–æ—Ä—É –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            selected_category_id = context.user_data.get('selected_category')
            if selected_category_id:
                db = get_db_session()
                try:
                    user = db.query(User).filter(User.telegram_id == user_id).first()
                    category = db.query(Category).filter(Category.id == selected_category_id).first()
                    
                    if user and category:
                        subcategories = db.query(Subcategory).filter(
                            Subcategory.category_id == category.id,
                            Subcategory.user_id == user.id
                        ).all()
                        
                        transaction_data = context.user_data.get('pending_transaction')
                        if transaction_data:
                            await self._show_subcategory_selection_from_message(update, category, subcategories, transaction_data['description'], user, db)
                            return
                finally:
                    db.close()
            
            await update.message.reply_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return
        
        if len(subcategory_name) > 50:
            await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤).")
            return
        
        if not subcategory_name:
            await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
            return
        
        selected_category_id = context.user_data.get('selected_category')
        if not selected_category_id:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.")
            return
        
        db = get_db_session()
        try:
            user = db.query(User).filter(User.telegram_id == user_id).first()
            if not user:
                await update.message.reply_text(get_message("start_first", "ru"))
                return
            
            category = db.query(Category).filter(Category.id == selected_category_id).first()
            if not category:
                await update.message.reply_text("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è
            existing_subcategory = db.query(Subcategory).filter(
                Subcategory.user_id == user.id,
                Subcategory.category_id == selected_category_id,
                Subcategory.name == subcategory_name
            ).first()
            
            if existing_subcategory:
                await update.message.reply_text(f"‚ùå –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è '{subcategory_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
                return
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å–º–∞–π–ª–∏–∫–∞
            context.user_data['new_subcategory_name'] = subcategory_name
            context.user_data.pop('waiting_for_subcategory_name', None)
            context.user_data['waiting_for_subcategory_emoji'] = True
            
            await self._show_subcategory_emoji_selection(update, subcategory_name, category.name)
            
        finally:
            db.close()

    async def _show_subcategory_emoji_selection(self, update: Update, subcategory_name: str, category_name: str) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Å–º–∞–π–ª–∏–∫–∞ –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        emoji_service = EmojiService()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å–º–∞–π–ª–∏–∫
        suggested_emoji = emoji_service.get_emoji_by_category_name(subcategory_name)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–º–∞–π–ª–∏–∫–∞–º–∏
        keyboard = []
        
        # –ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞ - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å–º–∞–π–ª–∏–∫
        keyboard.append([InlineKeyboardButton(
            f"‚úÖ {suggested_emoji} (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)", 
            callback_data=f"subcat_emoji_select_{suggested_emoji}"
        )])
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–º–∞–π–ª–∏–∫–æ–≤ –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        emoji_keyboard = emoji_service.get_emoji_keyboard_for_category(subcategory_name)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–º–∞–π–ª–∏–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        for emoji_row in emoji_keyboard:
            button_row = []
            for emoji in emoji_row:
                if emoji != suggested_emoji:  # –ù–µ –¥—É–±–ª–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π
                    button_row.append(InlineKeyboardButton(
                        emoji, 
                        callback_data=f"subcat_emoji_select_{emoji}"
                    ))
            if button_row:
                keyboard.append(button_row)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard.append([
            InlineKeyboardButton("üìÇ –ë–æ–ª—å—à–µ —Å–º–∞–π–ª–∏–∫–æ–≤", callback_data="subcat_more_emojis"),
            InlineKeyboardButton("üìÇ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é", callback_data="subcat_emoji_select_üìÇ")
        ])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="subcat_back_to_name")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"üòä **–í—ã–±–æ—Ä —Å–º–∞–π–ª–∏–∫–∞ –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{subcategory_name}'**\n\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n"
            f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å–º–∞–π–ª–∏–∫: {suggested_emoji}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–º–∞–π–ª–∏–∫ –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def _show_subcategory_selection_from_message(self, update: Update, category, subcategories, description, user, db):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∏–∑ message)"""
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—É—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–µ—Ä–µ–∑ OpenAI
        suggested_subcategory = await self._suggest_subcategory(description, category.id, user.id, db)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        keyboard.append([InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="subcat_skip")])
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è
        if suggested_subcategory:
            keyboard.append([InlineKeyboardButton(
                f"‚úÖ {suggested_subcategory} (–ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è)", 
                callback_data=f"select_subcat_{suggested_subcategory}"
            )])
        
        # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for subcategory in subcategories:
            if not suggested_subcategory or subcategory.name != suggested_subcategory:
                emoji = subcategory.emoji if hasattr(subcategory, 'emoji') and subcategory.emoji else "üìÇ"
                keyboard.append([InlineKeyboardButton(
                    f"{emoji} {subcategory.name}", 
                    callback_data=f"select_subcat_{subcategory.name}"
                )])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        keyboard.append([InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="create_new_subcategory")])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="subcat_back")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
        category_emoji = category.emoji if hasattr(category, 'emoji') and category.emoji else "üìÅ"
        message_text = (
            f"üìÇ **–í—ã–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è {category_emoji} {category.name}**\n\n"
        )
        
        if suggested_subcategory:
            message_text += f"üí° –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {suggested_subcategory}\n\n"
        
        message_text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥:"
        
        await update.message.reply_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def _create_transaction_final(self, query, context: ContextTypes.DEFAULT_TYPE, subcategory_name: str = None):
        """–°–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π"""
        transaction_data = context.user_data.get('pending_transaction')
        selected_category_id = context.user_data.get('selected_category')
        
        if not transaction_data or not selected_category_id:
            await query.edit_message_text("‚ùå –î–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        db = get_db_session()
        try:
            user = db.query(User).filter(User.telegram_id == query.from_user.id).first()
            category = db.query(Category).filter(Category.id == selected_category_id).first()
            
            if not category:
                await query.edit_message_text("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
            subcategory = None
            if subcategory_name:
                subcategory = db.query(Subcategory).filter(
                    Subcategory.name == subcategory_name,
                    Subcategory.category_id == selected_category_id,
                    Subcategory.user_id == user.id
                ).first()
            
            # –°–æ–∑–¥–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            balance, warning_msg, limit_exceeded, limit_info = await self._create_and_process_transaction(
                transaction_data, category, subcategory, db
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response_text = self._format_transaction_response(
                transaction_data, category, subcategory, user, balance, limit_info
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
            keyboard = self._get_main_menu_keyboard()
            
            await query.edit_message_text(response_text, parse_mode='Markdown', reply_markup=keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ –∑–∞–º–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
            if limit_exceeded:
                limit_keyboard = self._get_main_menu_keyboard()
                await query.message.reply_text(
                    warning_msg,
                    parse_mode='Markdown',
                    reply_markup=limit_keyboard
                )
            elif warning_msg:  # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ –ª–∏–º–∏—Ç—É
                await query.message.reply_text(warning_msg, parse_mode='Markdown')
            
        finally:
            db.close()
            context.user_data.pop('pending_transaction', None)
            context.user_data.pop('selected_category', None)
    
    async def handle_limit_edit_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏–º–∏—Ç–∞"""
        text = update.message.text.strip()
        user_id = update.effective_user.id
        edit_data = context.user_data.get('editing_limit')
        
        if not edit_data:
            await update.message.reply_text("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç–º–µ–Ω—É
        if self._is_cancel_command(text):
            context.user_data.pop('editing_limit', None)
            keyboard = self._get_main_menu_keyboard()
            await update.message.reply_text(
                "‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=keyboard
            )
            return
        
        db = get_db_session()
        try:
            user = db.query(User).filter(User.telegram_id == user_id).first()
            if not user:
                keyboard = self._get_main_menu_keyboard()
                await update.message.reply_text(
                    "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start",
                    reply_markup=keyboard
                )
                return
            
            limit = db.query(Limit).filter(
                Limit.id == edit_data['limit_id'],
                Limit.user_id == user.id
            ).first()
            
            if not limit:
                keyboard = self._get_main_menu_keyboard()
                await update.message.reply_text(
                    "–õ–∏–º–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    reply_markup=keyboard
                )
                return
            
            category = db.query(Category).filter(Category.id == limit.category_id).first()
            
            if edit_data['field'] == 'amount':
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É–º–º—ã
                from utils.parsers import parse_amount_and_currency
                result = parse_amount_and_currency(text)
                if not result:
                    await update.message.reply_text(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –∏ –≤–∞–ª—é—Ç—É, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
                        "`600 EUR` –∏–ª–∏ `400 USD`",
                        parse_mode='Markdown'
                    )
                    return
                
                amount, currency = result
                if amount <= 0:
                    await update.message.reply_text("‚ùå –°—É–º–º–∞ –ª–∏–º–∏—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
                    return
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–º–∏—Ç
                limit.amount = amount
                limit.currency = currency
                db.commit()
                
                period_text = "–Ω–µ–¥–µ–ª—é" if limit.period == "weekly" else "–º–µ—Å—è—Ü"
                keyboard = [[InlineKeyboardButton("üîô –ö –ª–∏–º–∏—Ç–∞–º", callback_data="settings_back")]]
                await update.message.reply_text(
                    f"‚úÖ **–õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!**\n\n"
                    f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}\n"
                    f"–ù–æ–≤—ã–π –ª–∏–º–∏—Ç: {amount} {currency} –∑–∞ {period_text}",
                    reply_markup=keyboard,
                    parse_mode='Markdown'
                )
                
                
        finally:
            db.close()
            context.user_data.pop('editing_limit', None)

    async def handle_new_category(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        category_name = update.message.text.strip()
        user_id = update.effective_user.id
        
        if len(category_name) > 50:
            await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤).")
            return
        
        db = get_db_session()
        try:
            user = db.query(User).filter(User.telegram_id == user_id).first()
            if not user:
                await update.message.reply_text(get_message("start_first", user.language if user else "ru"))
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
            existing_category = db.query(Category).filter(
                Category.user_id == user.id,
                Category.name == category_name
            ).first()
            
            if existing_category:
                await update.message.reply_text(
                    get_message("category_exists", user.language, name=category_name)
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–æ–±—Ä–∞–Ω–Ω—ã–º —Å–º–∞–π–ª–∏–∫–æ–º
            from services.emoji_service import EmojiService
            emoji_service = EmojiService()
            suggested_emoji = emoji_service.get_emoji_by_category_name(category_name)
            
            new_category = Category(
                name=category_name, 
                user_id=user.id, 
                is_default=False,
                emoji=suggested_emoji
            )
            db.add(new_category)
            db.commit()
            
            await update.message.reply_text(
                f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                f"{suggested_emoji} {category_name}\n\n"
                f"–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–º–∞–π–ª–∏–∫ —á–µ—Ä–µ–∑ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π (/categories)."
            )
            
        finally:
            db.close()
            context.user_data['waiting_for_category'] = None

    async def handle_new_limit(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –ª–∏–º–∏—Ç–∞"""
        from utils.parsers import parse_amount_and_currency
        
        text = update.message.text.strip()
        user_id = update.effective_user.id
        limit_data = context.user_data.get('waiting_for_limit')
        
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        if isinstance(limit_data, int):
            category_id = limit_data
            period = 'monthly'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –º–µ—Å—è—á–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        else:
            category_id = limit_data.get('category_id')
            period = limit_data.get('period', 'monthly')
            end_date = limit_data.get('end_date')
        
        # –ü–∞—Ä—Å–∏–Ω–≥ —Å—É–º–º—ã –∏ –≤–∞–ª—é—Ç—ã
        result = parse_amount_and_currency(text)
        if not result:
            await update.message.reply_text(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –∏ –≤–∞–ª—é—Ç—É, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
                "`500 EUR` –∏–ª–∏ `300 USD`",
                parse_mode='Markdown'
            )
            return
        
        amount, currency = result

        
        if amount <= 0:
            await update.message.reply_text("–°—É–º–º–∞ –ª–∏–º–∏—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
            return
        
        db = get_db_session()
        try:
            user = db.query(User).filter(User.telegram_id == user_id).first()
            if not user:
                await update.message.reply_text(get_message("start_first", user.language if user else "ru"))
                return
            
            category = db.query(Category).filter(
                Category.id == category_id,
                Category.user_id == user.id
            ).first()
            
            if not category:
                await update.message.reply_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –ª–∏–º–∏—Ç–∞ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            existing_limit = db.query(Limit).filter(
                Limit.user_id == user.id,
                Limit.category_id == category_id,
                Limit.currency == currency
            ).first()
            
            if existing_limit:
                await update.message.reply_text("–î–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏–º–∏—Ç –≤ –¥–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç–µ.")
                return
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç
            limit = Limit(
                user_id=user.id,
                category_id=category_id,
                amount=amount,
                currency=currency,
                period=period,
                end_date=end_date if period == 'custom' else None
            )
            
            db.add(limit)
            db.commit()
            
            name = user.name or "–±—Ä–æ"
            
            if period == 'custom':
                period_text = f"–¥–æ {end_date.strftime('%d.%m.%Y')}"
            else:
                period_text = "–Ω–µ–¥–µ–ª—é" if period == "weekly" else "–º–µ—Å—è—Ü"
                period_text = f"–∑–∞ {period_text}"
            
            keyboard = self._get_main_menu_keyboard()
            await update.message.reply_text(
                f"‚úÖ {name}, –ª–∏–º–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}\n"
                f"–õ–∏–º–∏—Ç: {amount} {currency} {period_text}",
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        finally:
            db.close()
            context.user_data['waiting_for_limit'] = None

    async def _start_category_creation(self, query, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        context.user_data['waiting_for_category_name'] = True
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –Ω–µ–π –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        transaction_data = context.user_data.get('pending_transaction')
        if transaction_data:
            context.user_data['pending_transaction_backup'] = transaction_data
        
        await query.edit_message_text(
            "üè∑Ô∏è **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n"
            "‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤\n"
            "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
            parse_mode='Markdown'
        )

    async def handle_category_name_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        category_name = update.message.text.strip()
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É
        if self._is_cancel_command(category_name):
            context.user_data.pop('waiting_for_category_name', None)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            transaction_data = context.user_data.get('pending_transaction_backup')
            if transaction_data:
                context.user_data['pending_transaction'] = transaction_data
                context.user_data.pop('pending_transaction_backup', None)
                
                db = get_db_session()
                try:
                    user = db.query(User).filter(User.telegram_id == user_id).first()
                    if user:
                        suggested_category = await self._suggest_category(transaction_data['description'], user.id, db)
                        await self._show_category_selection(update, suggested_category, user, db)
                        return
                finally:
                    db.close()
            
            await update.message.reply_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return
        
        if len(category_name) > 50:
            await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤).")
            return
        
        if not category_name:
            await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
            return
        
        db = get_db_session()
        try:
            user = db.query(User).filter(User.telegram_id == user_id).first()
            if not user:
                await update.message.reply_text(get_message("start_first", "ru"))
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
            existing_category = db.query(Category).filter(
                Category.user_id == user.id,
                Category.name == category_name
            ).first()
            
            if existing_category:
                await update.message.reply_text(f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                return
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å–º–∞–π–ª–∏–∫–∞
            context.user_data['new_category_name'] = category_name
            context.user_data.pop('waiting_for_category_name', None)
            context.user_data['waiting_for_category_emoji'] = True
            
            await self._show_emoji_selection(update, category_name)
            
        finally:
            db.close()

    async def _show_emoji_selection(self, update: Update, category_name: str) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Å–º–∞–π–ª–∏–∫–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        emoji_service = EmojiService()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å–º–∞–π–ª–∏–∫
        suggested_emoji = emoji_service.get_emoji_by_category_name(category_name)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–º–∞–π–ª–∏–∫–∞–º–∏
        reply_markup = self._create_emoji_keyboard(suggested_emoji, category_name, "emoji_select")
        
        await update.message.reply_text(
            f"üòä **–í—ã–±–æ—Ä —Å–º–∞–π–ª–∏–∫–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}'**\n\n"
            f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å–º–∞–π–ª–∏–∫: {suggested_emoji}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–º–∞–π–ª–∏–∫ –¥–ª—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def handle_emoji_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–º–∞–π–ª–∏–∫–∞"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "back_to_name":
            context.user_data.pop('waiting_for_category_emoji', None)
            context.user_data['waiting_for_category_name'] = True
            await query.edit_message_text(
                "üè∑Ô∏è **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏**\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n"
                "‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤\n"
                "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
                parse_mode='Markdown'
            )
            return
        
        if query.data == "more_emojis":
            await self._show_more_emojis(query, context)
            return
        
        if query.data == "back_to_emoji_selection":
            category_name = context.user_data.get('new_category_name', '')
            await self._show_emoji_selection_from_query(query, category_name)
            return
        
        if query.data.startswith("emoji_select_"):
            selected_emoji = query.data.replace("emoji_select_", "")
            await self._create_category_with_emoji(query, context, selected_emoji)
            return

    async def handle_subcategory_emoji_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–º–∞–π–ª–∏–∫–∞ –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "subcat_back_to_name":
            context.user_data.pop('waiting_for_subcategory_emoji', None)
            context.user_data['waiting_for_subcategory_name'] = True
            
            selected_category_id = context.user_data.get('selected_category')
            if selected_category_id:
                db = get_db_session()
                try:
                    category = db.query(Category).filter(Category.id == selected_category_id).first()
                    if category:
                        category_emoji = category.emoji if hasattr(category, 'emoji') and category.emoji else "üìÅ"
                        await query.edit_message_text(
                            f"üè∑Ô∏è **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏**\n\n"
                            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_emoji} {category.name}\n\n"
                            f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n"
                            f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤\n"
                            f"‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –≤ —Ä–∞–º–∫–∞—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n\n"
                            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
                            parse_mode='Markdown'
                        )
                        return
                finally:
                    db.close()
            
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        if query.data == "subcat_more_emojis":
            await self._show_more_subcategory_emojis(query, context)
            return
        
        if query.data == "subcat_back_to_emoji_selection":
            subcategory_name = context.user_data.get('new_subcategory_name', '')
            
            selected_category_id = context.user_data.get('selected_category')
            if selected_category_id:
                db = get_db_session()
                try:
                    category = db.query(Category).filter(Category.id == selected_category_id).first()
                    if category:
                        await self._show_subcategory_emoji_selection_from_query(query, subcategory_name, category.name)
                        return
                finally:
                    db.close()
            
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        if query.data.startswith("subcat_emoji_select_"):
            selected_emoji = query.data.replace("subcat_emoji_select_", "")
            await self._create_subcategory_with_emoji(query, context, selected_emoji)
            return

    async def _show_more_subcategory_emojis(self, query, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ —Å–º–∞–π–ª–∏–∫–æ–≤ –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        emoji_service = EmojiService()
        popular_emojis = emoji_service.get_popular_emojis()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ —Å–º–∞–π–ª–∏–∫–∞–º–∏
        keyboard = []
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 5 —Å–º–∞–π–ª–∏–∫–æ–≤
        for i in range(0, len(popular_emojis), 5):
            row = []
            for emoji in popular_emojis[i:i+5]:
                row.append(InlineKeyboardButton(
                    emoji, 
                    callback_data=f"subcat_emoji_select_{emoji}"
                ))
            keyboard.append(row)
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="subcat_back_to_emoji_selection")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        subcategory_name = context.user_data.get('new_subcategory_name', '')
        await query.edit_message_text(
            f"üòä **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–º–∞–π–ª–∏–∫–∏ –¥–ª—è '{subcategory_name}'**\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–º–∞–π–ª–∏–∫:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def _create_subcategory_with_emoji(self, query, context: ContextTypes.DEFAULT_TYPE, emoji: str) -> None:
        """–°–æ–∑–¥–∞—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å–º–∞–π–ª–∏–∫–æ–º"""
        subcategory_name = context.user_data.get('new_subcategory_name')
        selected_category_id = context.user_data.get('selected_category')
        user_id = query.from_user.id
        
        if not subcategory_name or not selected_category_id:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        db = get_db_session()
        try:
            user = db.query(User).filter(User.telegram_id == user_id).first()
            if not user:
                await query.edit_message_text(get_message("start_first", "ru"))
                return
            
            category = db.query(Category).filter(Category.id == selected_category_id).first()
            if not category:
                await query.edit_message_text("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å —Å–º–∞–π–ª–∏–∫–æ–º
            new_subcategory = Subcategory(
                name=subcategory_name,
                emoji=emoji,
                category_id=selected_category_id,
                user_id=user.id
            )
            
            db.add(new_subcategory)
            db.commit()
            db.refresh(new_subcategory)
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            context.user_data.pop('waiting_for_subcategory_emoji', None)
            context.user_data.pop('new_subcategory_name', None)
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å –Ω–æ–≤–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
            await self._create_transaction_final(query, context, new_subcategory.name)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {str(e)}")
        finally:
            db.close()

    async def _show_subcategory_emoji_selection_from_query(self, query, subcategory_name: str, category_name: str) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Å–º–∞–π–ª–∏–∫–∞ –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∏–∑ callback query)"""
        emoji_service = EmojiService()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å–º–∞–π–ª–∏–∫
        suggested_emoji = emoji_service.get_emoji_by_category_name(subcategory_name)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–º–∞–π–ª–∏–∫–∞–º–∏
        keyboard = []
        
        # –ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞ - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å–º–∞–π–ª–∏–∫
        keyboard.append([InlineKeyboardButton(
            f"‚úÖ {suggested_emoji} (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)", 
            callback_data=f"subcat_emoji_select_{suggested_emoji}"
        )])
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–º–∞–π–ª–∏–∫–æ–≤ –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        emoji_keyboard = emoji_service.get_emoji_keyboard_for_category(subcategory_name)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–º–∞–π–ª–∏–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        for emoji_row in emoji_keyboard:
            button_row = []
            for emoji in emoji_row:
                if emoji != suggested_emoji:  # –ù–µ –¥—É–±–ª–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π
                    button_row.append(InlineKeyboardButton(
                        emoji, 
                        callback_data=f"subcat_emoji_select_{emoji}"
                    ))
            if button_row:
                keyboard.append(button_row)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard.append([
            InlineKeyboardButton("üìÇ –ë–æ–ª—å—à–µ —Å–º–∞–π–ª–∏–∫–æ–≤", callback_data="subcat_more_emojis"),
            InlineKeyboardButton("üìÇ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é", callback_data="subcat_emoji_select_üìÇ")
        ])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="subcat_back_to_name")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"üòä **–í—ã–±–æ—Ä —Å–º–∞–π–ª–∏–∫–∞ –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{subcategory_name}'**\n\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n"
            f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å–º–∞–π–ª–∏–∫: {suggested_emoji}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–º–∞–π–ª–∏–∫ –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def _show_more_emojis(self, query, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ —Å–º–∞–π–ª–∏–∫–æ–≤"""
        emoji_service = EmojiService()
        popular_emojis = emoji_service.get_popular_emojis()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ —Å–º–∞–π–ª–∏–∫–∞–º–∏
        keyboard = []
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 5 —Å–º–∞–π–ª–∏–∫–æ–≤
        for i in range(0, len(popular_emojis), 5):
            row = []
            for emoji in popular_emojis[i:i+5]:
                row.append(InlineKeyboardButton(
                    emoji, 
                    callback_data=f"emoji_select_{emoji}"
                ))
            keyboard.append(row)
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_emoji_selection")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        category_name = context.user_data.get('new_category_name', '')
        await query.edit_message_text(
            f"üòä **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–º–∞–π–ª–∏–∫–∏ –¥–ª—è '{category_name}'**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–º–∞–π–ª–∏–∫:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def _show_emoji_selection_from_query(self, query, category_name: str) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Å–º–∞–π–ª–∏–∫–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∏–∑ callback query)"""
        emoji_service = EmojiService()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å–º–∞–π–ª–∏–∫
        suggested_emoji = emoji_service.get_emoji_by_category_name(category_name)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–º–∞–π–ª–∏–∫–∞–º–∏
        keyboard = []
        
        # –ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞ - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å–º–∞–π–ª–∏–∫
        keyboard.append([InlineKeyboardButton(
            f"‚úÖ {suggested_emoji} (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)", 
            callback_data=f"emoji_select_{suggested_emoji}"
        )])
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–º–∞–π–ª–∏–∫–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        emoji_keyboard = emoji_service.get_emoji_keyboard_for_category(category_name)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–º–∞–π–ª–∏–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        for emoji_row in emoji_keyboard:
            button_row = []
            for emoji in emoji_row:
                if emoji != suggested_emoji:  # –ù–µ –¥—É–±–ª–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π
                    button_row.append(InlineKeyboardButton(
                        emoji, 
                        callback_data=f"emoji_select_{emoji}"
                    ))
            if button_row:
                keyboard.append(button_row)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard.append([
            InlineKeyboardButton("üìÇ –ë–æ–ª—å—à–µ —Å–º–∞–π–ª–∏–∫–æ–≤", callback_data="more_emojis"),
            InlineKeyboardButton("üìÅ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é", callback_data="emoji_select_üìÅ")
        ])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_name")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"üòä **–í—ã–±–æ—Ä —Å–º–∞–π–ª–∏–∫–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}'**\n\n"
            f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å–º–∞–π–ª–∏–∫: {suggested_emoji}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–º–∞–π–ª–∏–∫ –¥–ª—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def _create_category_with_emoji(self, query, context: ContextTypes.DEFAULT_TYPE, emoji: str) -> None:
        """–°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å–º–∞–π–ª–∏–∫–æ–º"""
        category_name = context.user_data.get('new_category_name')
        user_id = query.from_user.id
        
        if not category_name:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        db = get_db_session()
        try:
            user = db.query(User).filter(User.telegram_id == user_id).first()
            if not user:
                await query.edit_message_text(get_message("start_first", "ru"))
                return
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å —Å–º–∞–π–ª–∏–∫–æ–º
            new_category = Category(
                name=category_name,
                emoji=emoji,
                user_id=user.id,
                is_default=False
            )
            
            db.add(new_category)
            db.commit()
            db.refresh(new_category)
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            context.user_data.pop('waiting_for_category_emoji', None)
            context.user_data.pop('new_category_name', None)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
            transaction_data = context.user_data.get('pending_transaction_backup')
            if transaction_data:
                context.user_data['pending_transaction'] = transaction_data
                context.user_data.pop('pending_transaction_backup', None)
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                await self._create_transaction_with_category(query, context, new_category)
            else:
                await query.edit_message_text(
                    f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                    f"{emoji} {category_name}",
                    parse_mode='Markdown'
                )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {str(e)}")
        finally:
            db.close()

    async def _create_transaction_with_category(self, query, context: ContextTypes.DEFAULT_TYPE, category: Category) -> None:
        """–°–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π"""
        transaction_data = context.user_data.get('pending_transaction')
        if not transaction_data:
            await query.edit_message_text("‚ùå –î–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        db = get_db_session()
        try:
            user = db.query(User).filter(User.telegram_id == query.from_user.id).first()
            
            # –°–æ–∑–¥–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            balance, warning_msg, limit_exceeded, limit_info = await self._create_and_process_transaction(
                transaction_data, category, None, db
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response_text = self._format_transaction_response(
                transaction_data, category, None, user, balance, limit_info, new_category=True
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
            keyboard = self._get_main_menu_keyboard()
            
            await query.edit_message_text(response_text, parse_mode='Markdown', reply_markup=keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ –∑–∞–º–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
            if limit_exceeded:
                limit_keyboard = self._get_main_menu_keyboard()
                await query.message.reply_text(
                    warning_msg,
                    parse_mode='Markdown',
                    reply_markup=limit_keyboard
                )
            elif warning_msg:  # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ –ª–∏–º–∏—Ç—É
                await query.message.reply_text(warning_msg, parse_mode='Markdown')
            
        finally:
            db.close()
            context.user_data.pop('pending_transaction', None)
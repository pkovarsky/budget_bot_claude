import logging
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from database import get_db_session, User, Category, Transaction, Limit

logger = logging.getLogger(__name__)


async def limits_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /limits"""
    user_id = update.effective_user.id
    
    db = get_db_session()
    try:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        if not user:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        limits = db.query(Limit).filter(Limit.user_id == user.id).all()
        
        keyboard = []
        
        if limits:
            keyboard.append([InlineKeyboardButton("üìã –ú–æ–∏ –ª–∏–º–∏—Ç—ã", callback_data="limits_view")])
        
        keyboard.extend([
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ª–∏–º–∏—Ç", callback_data="limits_add")],
            [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –ª–∏–º–∏—Ç", callback_data="limits_delete")]
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üí≥ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞–º–∏**\\n\\n"
            "–õ–∏–º–∏—Ç—ã –ø–æ–º–æ–≥–∞—é—Ç –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.\\n"
            "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ 80% –∏ 100% –ª–∏–º–∏—Ç–∞.",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    finally:
        db.close()


async def handle_limits_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –ª–∏–º–∏—Ç–æ–≤"""
    query = update.callback_query
    user_id = update.effective_user.id
    data = query.data
    
    db = get_db_session()
    try:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        if not user:
            await query.edit_message_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
            return
        
        if data == "limits_view":
            limits = db.query(Limit).filter(Limit.user_id == user.id).all()
            
            if not limits:
                keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="limits_back")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤.",
                    reply_markup=reply_markup
                )
                return
            
            message = "üìã **–í–∞—à–∏ –ª–∏–º–∏—Ç—ã:**\\n\\n"
            
            for limit in limits:
                category = db.query(Category).filter(Category.id == limit.category_id).first()
                
                # –°—á–∏—Ç–∞–µ–º –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—É—é —Å—É–º–º—É –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
                now = datetime.now()
                start_of_month = now.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
                
                spent = db.query(Transaction).filter(
                    Transaction.user_id == user.id,
                    Transaction.category_id == limit.category_id,
                    Transaction.amount < 0,
                    Transaction.created_at >= start_of_month,
                    Transaction.currency == limit.currency
                ).all()
                
                total_spent = sum(abs(t.amount) for t in spent)
                percentage = (total_spent / limit.amount * 100) if limit.amount > 0 else 0
                
                status_emoji = "üî¥" if percentage >= 100 else "üü°" if percentage >= 80 else "üü¢"
                
                message += f"{status_emoji} **{category.name}**\\n"
                message += f"   –õ–∏–º–∏—Ç: {limit.amount} {limit.currency}\\n"
                message += f"   –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {total_spent:.2f} {limit.currency} ({percentage:.1f}%)\\n\\n"
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="limits_back")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')
            
        elif data == "limits_add":
            categories = db.query(Category).filter(Category.user_id == user.id).all()
            
            keyboard = []
            for category in categories:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ª–∏–º–∏—Ç –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                existing_limit = db.query(Limit).filter(
                    Limit.user_id == user.id,
                    Limit.category_id == category.id
                ).first()
                
                if not existing_limit:
                    keyboard.append([InlineKeyboardButton(
                        f"üìÅ {category.name}",
                        callback_data=f"limits_add_cat_{category.id}"
                    )])
            
            if not keyboard:
                keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="limits_back")]]
                await query.edit_message_text(
                    "–î–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ª–∏–º–∏—Ç—ã.",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            else:
                keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="limits_back")])
                await query.edit_message_text(
                    "üìù **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞**\\n\\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–∏–º–∏—Ç–∞:",
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='Markdown'
                )
                
        elif data.startswith("limits_add_cat_"):
            category_id = int(data.split("_")[3])
            category = db.query(Category).filter(
                Category.id == category_id,
                Category.user_id == user.id
            ).first()
            
            if not category:
                await query.edit_message_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
            
            await query.edit_message_text(
                f"üìù **–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–∏–º–∏—Ç–∞ –¥–ª—è '{category.name}'**\\n\\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É –ª–∏–º–∏—Ç–∞ —Å –≤–∞–ª—é—Ç–æ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä:\\n"
                "`500 EUR` –∏–ª–∏ `10000 RUB` –∏–ª–∏ `300 USD`",
                parse_mode='Markdown'
            )
            
            context.user_data['waiting_for_limit'] = category_id
            
        elif data == "limits_delete":
            limits = db.query(Limit).filter(Limit.user_id == user.id).all()
            
            if not limits:
                keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="limits_back")]]
                await query.edit_message_text(
                    "–£ –≤–∞—Å –Ω–µ—Ç –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                return
            
            keyboard = []
            for limit in limits:
                category = db.query(Category).filter(Category.id == limit.category_id).first()
                keyboard.append([InlineKeyboardButton(
                    f"üóë {category.name} ({limit.amount} {limit.currency})",
                    callback_data=f"limits_delete_{limit.id}"
                )])
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="limits_back")])
            
            await query.edit_message_text(
                "üóë **–£–¥–∞–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞**\\n\\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏–º–∏—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            
        elif data.startswith("limits_delete_"):
            limit_id = int(data.split("_")[2])
            limit = db.query(Limit).filter(
                Limit.id == limit_id,
                Limit.user_id == user.id
            ).first()
            
            if not limit:
                await query.edit_message_text("–õ–∏–º–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            category = db.query(Category).filter(Category.id == limit.category_id).first()
            
            db.delete(limit)
            db.commit()
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="limits_back")]]
            await query.edit_message_text(
                f"‚úÖ –õ–∏–º–∏—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category.name}' —É–¥–∞–ª–µ–Ω.",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        elif data == "limits_back":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –ª–∏–º–∏—Ç–æ–≤
            limits = db.query(Limit).filter(Limit.user_id == user.id).all()
            
            keyboard = []
            
            if limits:
                keyboard.append([InlineKeyboardButton("üìã –ú–æ–∏ –ª–∏–º–∏—Ç—ã", callback_data="limits_view")])
            
            keyboard.extend([
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ª–∏–º–∏—Ç", callback_data="limits_add")],
                [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –ª–∏–º–∏—Ç", callback_data="limits_delete")]
            ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "üí≥ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞–º–∏**\\n\\n"
                "–õ–∏–º–∏—Ç—ã –ø–æ–º–æ–≥–∞—é—Ç –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.\\n"
                "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ 80% –∏ 100% –ª–∏–º–∏—Ç–∞.",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        
    finally:
        db.close()
import logging
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from database import get_db_session, User, Category, Transaction, Limit
from utils.telegram_utils import safe_edit_message, safe_answer_callback

logger = logging.getLogger(__name__)


async def limits_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /limits"""
    user_id = update.effective_user.id
    
    db = get_db_session()
    try:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        if not user:
            keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]]
            await update.message.reply_text(
                "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        limits = db.query(Limit).filter(Limit.user_id == user.id).all()
        
        keyboard = []
        
        if limits:
            keyboard.append([InlineKeyboardButton("üìã –ú–æ–∏ –ª–∏–º–∏—Ç—ã", callback_data="limits_view")])
        
        keyboard.extend([
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ª–∏–º–∏—Ç", callback_data="limits_add"),
             InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç", callback_data="limits_edit")],
            [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –ª–∏–º–∏—Ç", callback_data="limits_delete")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üí≥ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞–º–∏**\n\n"
            "–õ–∏–º–∏—Ç—ã –ø–æ–º–æ–≥–∞—é—Ç –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.\n"
            "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ 80% –∏ 100% –ª–∏–º–∏—Ç–∞.",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    finally:
        db.close()


async def limits_command_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /limits —á–µ—Ä–µ–∑ callback"""
    query = update.callback_query
    await safe_answer_callback(query)
    
    user_id = update.effective_user.id
    
    db = get_db_session()
    try:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        if not user:
            await safe_edit_message(query, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        limits = db.query(Limit).filter(Limit.user_id == user.id).all()
        
        keyboard = []
        
        if limits:
            keyboard.append([InlineKeyboardButton("üìã –ú–æ–∏ –ª–∏–º–∏—Ç—ã", callback_data="limits_view")])
        
        keyboard.extend([
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ª–∏–º–∏—Ç", callback_data="limits_add"),
             InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –ª–∏–º–∏—Ç", callback_data="limits_delete")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await safe_edit_message(query,
            "üí≥ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞–º–∏**\n\n"
            "–õ–∏–º–∏—Ç—ã –ø–æ–º–æ–≥–∞—é—Ç –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.\n"
            "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ 80% –∏ 100% –ª–∏–º–∏—Ç–∞.",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    finally:
        db.close()


async def handle_limits_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –ª–∏–º–∏—Ç–æ–≤"""
    query = update.callback_query
    user_id = update.effective_user.id
    data = query.data
    
    db = get_db_session()
    try:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        if not user:
            keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]]
            await query.edit_message_text(
                "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return
        
        if data == "limits_view":
            limits = db.query(Limit).filter(Limit.user_id == user.id).all()
            
            if not limits:
                keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings_back")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤.",
                    reply_markup=reply_markup
                )
                return
            
            message = "üìã **–í–∞—à–∏ –ª–∏–º–∏—Ç—ã:**\n\n"
            
            for limit in limits:
                category = db.query(Category).filter(Category.id == limit.category_id).first()
                
                # –°—á–∏—Ç–∞–µ–º –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—É—é —Å—É–º–º—É –∑–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø–µ—Ä–∏–æ–¥
                now = datetime.now()
                
                if limit.period == 'weekly':
                    # –ù–µ–¥–µ–ª—è - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
                    period_start = now - timedelta(days=7)
                elif limit.period == 'custom' and limit.end_date:
                    # –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø–µ—Ä–∏–æ–¥ - –æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–º–∏—Ç–∞ –¥–æ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã
                    period_start = limit.created_at
                else:
                    # –ú–µ—Å—è—Ü - —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
                    period_start = now.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
                
                spent = db.query(Transaction).filter(
                    Transaction.user_id == user.id,
                    Transaction.category_id == limit.category_id,
                    Transaction.amount < 0,
                    Transaction.created_at >= period_start,
                    Transaction.currency == limit.currency
                ).all()
                
                total_spent = sum(abs(t.amount) for t in spent)
                percentage = (total_spent / limit.amount * 100) if limit.amount > 0 else 0
                
                status_emoji = "üî¥" if percentage >= 100 else "üü°" if percentage >= 80 else "üü¢"
                
                if limit.period == "weekly":
                    period_text = "–Ω–µ–¥–µ–ª—é"
                elif limit.period == "custom" and limit.end_date:
                    period_text = f"–¥–æ {limit.end_date.strftime('%d.%m.%Y')}"
                else:
                    period_text = "–º–µ—Å—è—Ü"
                
                message += f"{status_emoji} **{category.name}**\n"
                message += f"   –õ–∏–º–∏—Ç: {limit.amount} {limit.currency} –∑–∞ {period_text}\n"
                message += f"   –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {total_spent:.2f} {limit.currency} ({percentage:.1f}%)\n"
                message += f"   –û—Å—Ç–∞–ª–æ—Å—å: {limit.amount - total_spent:.2f} {limit.currency} ({100 - percentage:.1f}%)\n\n"

            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings_back")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')
            
        elif data == "limits_add":
            categories = db.query(Category).filter(Category.user_id == user.id).all()
            
            keyboard = []
            for category in categories:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ª–∏–º–∏—Ç –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                existing_limit = db.query(Limit).filter(
                    Limit.user_id == user.id,
                    Limit.category_id == category.id
                ).first()
                
                if not existing_limit:
                    keyboard.append([InlineKeyboardButton(
                        f"üìÅ {category.name}",
                        callback_data=f"limits_add_cat_{category.id}"
                    )])
            
            if not keyboard:
                keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings_back")]]
                await query.edit_message_text(
                    "–î–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ª–∏–º–∏—Ç—ã.",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            else:
                keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings_back")])
                await query.edit_message_text(
                    "üìù **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞**\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–∏–º–∏—Ç–∞:",
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='Markdown'
                )
                
        elif data.startswith("limits_add_cat_"):
            category_id = int(data.split("_")[3])
            category = db.query(Category).filter(
                Category.id == category_id,
                Category.user_id == user.id
            ).first()
            
            if not category:
                keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]]
                await query.edit_message_text(
                    "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞
            keyboard = [
                [InlineKeyboardButton("üìÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ", callback_data=f"limits_period_weekly_{category_id}")],
                [InlineKeyboardButton("üìä –ï–∂–µ–º–µ—Å—è—á–Ω–æ", callback_data=f"limits_period_monthly_{category_id}")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="limits_add")]
            ]
            
            await query.edit_message_text(
                f"üìù **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–∏–º–∏—Ç–∞ –¥–ª—è {category.name}**\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ª–∏–º–∏—Ç–∞:",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            
        elif data.startswith("limits_period_"):
            parts = data.split("_")
            period = parts[2]  # weekly –∏–ª–∏ monthly
            category_id = int(parts[3])
            
            category = db.query(Category).filter(
                Category.id == category_id,
                Category.user_id == user.id
            ).first()
            
            if not category:
                keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]]
                await query.edit_message_text(
                    "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                return
            
            period_text = "–Ω–µ–¥–µ–ª—é" if period == "weekly" else "–º–µ—Å—è—Ü"
            
            keyboard = [
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="limits_add")]
            ]
            await query.edit_message_text(
                f"üìù **–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–∏–º–∏—Ç–∞ –¥–ª—è '{category.name}' ({period_text})**\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É –ª–∏–º–∏—Ç–∞ —Å –≤–∞–ª—é—Ç–æ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
                "`500 EUR` –∏–ª–∏ `300 USD`\n\n"
                "üí° –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            
            context.user_data['waiting_for_limit'] = {
                'category_id': category_id,
                'period': period
            }
            
        elif data == "limits_edit":
            limits = db.query(Limit).filter(Limit.user_id == user.id).all()
            
            if not limits:
                keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings_back")]]
                await query.edit_message_text(
                    "–£ –≤–∞—Å –Ω–µ—Ç –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                return
            
            keyboard = []
            for limit in limits:
                category = db.query(Category).filter(Category.id == limit.category_id).first()
                period_text = "–Ω–µ–¥–µ–ª—é" if limit.period == "weekly" else "–º–µ—Å—è—Ü"
                keyboard.append([InlineKeyboardButton(
                    f"‚úèÔ∏è {category.name} ({limit.amount} {limit.currency}/{period_text})",
                    callback_data=f"limits_edit_select_{limit.id}"
                )])
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings_back")])
            
            await query.edit_message_text(
                "‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏–º–∏—Ç–∞**\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏–º–∏—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            
        elif data == "limits_delete":
            limits = db.query(Limit).filter(Limit.user_id == user.id).all()
            
            if not limits:
                keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings_back")]]
                await query.edit_message_text(
                    "–£ –≤–∞—Å –Ω–µ—Ç –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                return
            
            keyboard = []
            for limit in limits:
                category = db.query(Category).filter(Category.id == limit.category_id).first()
                keyboard.append([InlineKeyboardButton(
                    f"üóë {category.name} ({limit.amount} {limit.currency})",
                    callback_data=f"limits_delete_confirm_{limit.id}"
                )])
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings_back")])
            
            await query.edit_message_text(
                "üóë **–£–¥–∞–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞**\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏–º–∏—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            
        elif data.startswith("limits_delete_confirm_"):
            limit_id = int(data.split("_")[3])
            limit = db.query(Limit).filter(
                Limit.id == limit_id,
                Limit.user_id == user.id
            ).first()
            
            if not limit:
                keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]]
                await query.edit_message_text(
                    "–õ–∏–º–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                return
            
            category = db.query(Category).filter(Category.id == limit.category_id).first()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
            keyboard = [
                [InlineKeyboardButton("üóë –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"limits_delete_final_{limit_id}")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="limits_delete")]
            ]
            
            await query.edit_message_text(
                f"‚ö†Ô∏è **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è**\n\n"
                f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ª–∏–º–∏—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category.name}'?\n\n"
                f"–õ–∏–º–∏—Ç: {limit.amount} {limit.currency}",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            
        elif data.startswith("limits_delete_final_"):
            limit_id = int(data.split("_")[3])
            limit = db.query(Limit).filter(
                Limit.id == limit_id,
                Limit.user_id == user.id
            ).first()
            
            if not limit:
                keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]]
                await query.edit_message_text(
                    "–õ–∏–º–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                return
            
            category = db.query(Category).filter(Category.id == limit.category_id).first()
            
            db.delete(limit)
            db.commit()
            
            keyboard = [[InlineKeyboardButton("üîô –ö –ª–∏–º–∏—Ç–∞–º", callback_data="settings_back")]]
            await query.edit_message_text(
                f"‚úÖ **–õ–∏–º–∏—Ç —É–¥–∞–ª–µ–Ω**\n\n"
                f"–õ–∏–º–∏—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category.name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            
        elif data.startswith("limits_edit_select_"):
            limit_id = int(data.split("_")[3])
            limit = db.query(Limit).filter(
                Limit.id == limit_id,
                Limit.user_id == user.id
            ).first()
            
            if not limit:
                keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]]
                await query.edit_message_text(
                    "–õ–∏–º–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                return
            
            category = db.query(Category).filter(Category.id == limit.category_id).first()
            period_text = "–Ω–µ–¥–µ–ª—é" if limit.period == "weekly" else "–º–µ—Å—è—Ü"
            
            keyboard = [
                [InlineKeyboardButton("üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É", callback_data=f"limits_edit_amount_{limit_id}")],
                [InlineKeyboardButton("üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä–∏–æ–¥", callback_data=f"limits_edit_period_{limit_id}")],
                [InlineKeyboardButton("üìÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É", callback_data=f"limits_edit_date_{limit_id}")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="limits_edit")]
            ]
            
            await query.edit_message_text(
                f"‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏–º–∏—Ç–∞**\n\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}\n"
                f"–¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç: {limit.amount} {limit.currency} –∑–∞ {period_text}\n\n"
                f"–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            
        elif data.startswith("limits_edit_amount_"):
            limit_id = int(data.split("_")[3])
            limit = db.query(Limit).filter(
                Limit.id == limit_id,
                Limit.user_id == user.id
            ).first()
            
            if not limit:
                keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]]
                await query.edit_message_text(
                    "–õ–∏–º–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                return
            
            category = db.query(Category).filter(Category.id == limit.category_id).first()
            
            keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"limits_edit_select_{limit_id}")]]
            await query.edit_message_text(
                f"üí∞ **–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—É–º–º—ã –ª–∏–º–∏—Ç–∞**\n\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}\n"
                f"–¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç: {limit.amount} {limit.currency}\n\n"
                f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É —Å –≤–∞–ª—é—Ç–æ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
                f"`600 EUR` –∏–ª–∏ `400 USD`\n\n"
                f"üí° –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            
            context.user_data['editing_limit'] = {
                'limit_id': limit_id,
                'field': 'amount'
            }
            
        elif data.startswith("limits_edit_period_"):
            limit_id = int(data.split("_")[3])
            limit = db.query(Limit).filter(
                Limit.id == limit_id,
                Limit.user_id == user.id
            ).first()
            
            if not limit:
                keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]]
                await query.edit_message_text(
                    "–õ–∏–º–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                return
            
            category = db.query(Category).filter(Category.id == limit.category_id).first()
            
            keyboard = [
                [InlineKeyboardButton("üìÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ", callback_data=f"limits_period_update_weekly_{limit_id}")],
                [InlineKeyboardButton("üìä –ï–∂–µ–º–µ—Å—è—á–Ω–æ", callback_data=f"limits_period_update_monthly_{limit_id}")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"limits_edit_select_{limit_id}")]
            ]
            
            current_period = "–Ω–µ–¥–µ–ª—é" if limit.period == "weekly" else "–º–µ—Å—è—Ü"
            await query.edit_message_text(
                f"üìÖ **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –ª–∏–º–∏—Ç–∞**\n\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}\n"
                f"–¢–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥: {current_period}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥:",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            
        elif data.startswith("limits_edit_date_"):
            limit_id = int(data.split("_")[3])
            limit = db.query(Limit).filter(
                Limit.id == limit_id,
                Limit.user_id == user.id
            ).first()
            
            if not limit:
                keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]]
                await query.edit_message_text(
                    "–õ–∏–º–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                return
            
            category = db.query(Category).filter(Category.id == limit.category_id).first()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã–±–æ—Ä –¥–∞—Ç—ã
            context.user_data['date_selection'] = {
                'limit_id': limit_id,
                'day': None,
                'month': None,
                'year': None
            }
            
            await _show_day_selection(query, context, category, limit)
            
        elif data.startswith("limits_period_update_"):
            parts = data.split("_")
            new_period = parts[3]  # weekly –∏–ª–∏ monthly
            limit_id = int(parts[4])
            
            limit = db.query(Limit).filter(
                Limit.id == limit_id,
                Limit.user_id == user.id
            ).first()
            
            if not limit:
                keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]]
                await query.edit_message_text(
                    "–õ–∏–º–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                return
            
            category = db.query(Category).filter(Category.id == limit.category_id).first()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
            limit.period = new_period
            db.commit()
            
            period_text = "–Ω–µ–¥–µ–ª—é" if new_period == "weekly" else "–º–µ—Å—è—Ü"
            keyboard = [[InlineKeyboardButton("üîô –ö –ª–∏–º–∏—Ç–∞–º", callback_data="settings_back")]]
            await query.edit_message_text(
                f"‚úÖ **–ü–µ—Ä–∏–æ–¥ –ª–∏–º–∏—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω**\n\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}\n"
                f"–ù–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥: {period_text}\n"
                f"–õ–∏–º–∏—Ç: {limit.amount} {limit.currency} –∑–∞ {period_text}",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            
        elif data.startswith("date_") or data in ["date_back_to_day", "date_back_to_month", "date_back_to_year"]:
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
            await handle_date_selection_callback(update, context)
            
        elif data == "limits_back":
            context.user_data.pop('waiting_for_limit', None)
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –ª–∏–º–∏—Ç–æ–≤
            limits = db.query(Limit).filter(Limit.user_id == user.id).all()
            
            keyboard = []
            
            if limits:
                keyboard.append([InlineKeyboardButton("üìã –ú–æ–∏ –ª–∏–º–∏—Ç—ã", callback_data="limits_view")])
            
            keyboard.extend([
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ª–∏–º–∏—Ç", callback_data="limits_add")],
                [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –ª–∏–º–∏—Ç", callback_data="limits_delete")]
            ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "üí≥ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞–º–∏**\n\n"
                "–õ–∏–º–∏—Ç—ã –ø–æ–º–æ–≥–∞—é—Ç –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.\n"
                "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ 80% –∏ 100% –ª–∏–º–∏—Ç–∞.",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        
    finally:
        db.close()


async def _show_day_selection(query, context: ContextTypes.DEFAULT_TYPE, category, limit):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –¥–Ω—è"""
    keyboard = []
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–Ω–µ–π 1-31
    for i in range(1, 32, 7):  # –ü–æ 7 –¥–Ω–µ–π –≤ —Å—Ç—Ä–æ–∫–µ
        row = []
        for day in range(i, min(i + 7, 32)):
            row.append(InlineKeyboardButton(
                str(day),
                callback_data=f"date_day_{day}"
            ))
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"limits_edit_select_{limit.id}")])
    
    await query.edit_message_text(
        f"üìÖ **–í—ã–±–æ—Ä –¥–∞—Ç—ã –¥–ª—è –ª–∏–º–∏—Ç–∞**\n\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}\n"
        f"–õ–∏–º–∏—Ç: {limit.amount} {limit.currency}\n\n"
        f"**–®–∞–≥ 1/3**: –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def _show_month_selection(query, context: ContextTypes.DEFAULT_TYPE, category, limit):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –º–µ—Å—è—Ü–∞"""
    months = [
        "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
        "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
    ]
    
    keyboard = []
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–µ—Å—è—Ü–µ–≤ –ø–æ 3 –≤ —Å—Ç—Ä–æ–∫–µ
    for i in range(0, 12, 3):
        row = []
        for month_idx in range(i, min(i + 3, 12)):
            month_num = month_idx + 1
            row.append(InlineKeyboardButton(
                months[month_idx],
                callback_data=f"date_month_{month_num}"
            ))
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="date_back_to_day")])
    
    selected_day = context.user_data['date_selection']['day']
    
    await query.edit_message_text(
        f"üìÖ **–í—ã–±–æ—Ä –¥–∞—Ç—ã –¥–ª—è –ª–∏–º–∏—Ç–∞**\n\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}\n"
        f"–õ–∏–º–∏—Ç: {limit.amount} {limit.currency}\n\n"
        f"**–®–∞–≥ 2/3**: –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:\n"
        f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å: {selected_day}",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def _show_year_selection(query, context: ContextTypes.DEFAULT_TYPE, category, limit):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –≥–æ–¥–∞"""
    current_year = datetime.now().year
    years = list(range(current_year, current_year + 5))  # –¢–µ–∫—É—â–∏–π –≥–æ–¥ + 4 —Å–ª–µ–¥—É—é—â–∏—Ö
    
    keyboard = []
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≥–æ–¥–æ–≤ –ø–æ 2 –≤ —Å—Ç—Ä–æ–∫–µ
    for i in range(0, len(years), 2):
        row = []
        for year_idx in range(i, min(i + 2, len(years))):
            year = years[year_idx]
            row.append(InlineKeyboardButton(
                str(year),
                callback_data=f"date_year_{year}"
            ))
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="date_back_to_month")])
    
    selected_day = context.user_data['date_selection']['day']
    selected_month = context.user_data['date_selection']['month']
    month_names = ["", "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
                   "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"]
    
    await query.edit_message_text(
        f"üìÖ **–í—ã–±–æ—Ä –¥–∞—Ç—ã –¥–ª—è –ª–∏–º–∏—Ç–∞**\n\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}\n"
        f"–õ–∏–º–∏—Ç: {limit.amount} {limit.currency}\n\n"
        f"**–®–∞–≥ 3/3**: –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥:\n"
        f"–í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞: {selected_day} {month_names[selected_month]}",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_date_selection_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if not context.user_data.get('date_selection'):
        keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]]
        await query.edit_message_text(
            "‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return
    
    db = get_db_session()
    try:
        limit_id = context.user_data['date_selection']['limit_id']
        limit = db.query(Limit).filter(
            Limit.id == limit_id,
            Limit.user_id == query.from_user.id
        ).first()
        
        if not limit:
            keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]]
            await query.edit_message_text(
                "–õ–∏–º–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return
        
        category = db.query(Category).filter(Category.id == limit.category_id).first()
        
        if data.startswith("date_day_"):
            day = int(data.split("_")[2])
            context.user_data['date_selection']['day'] = day
            await _show_month_selection(query, context, category, limit)
            
        elif data.startswith("date_month_"):
            month = int(data.split("_")[2])
            context.user_data['date_selection']['month'] = month
            await _show_year_selection(query, context, category, limit)
            
        elif data.startswith("date_year_"):
            year = int(data.split("_")[2])
            context.user_data['date_selection']['year'] = year
            
            # –í—Å–µ —á–∞—Å—Ç–∏ –¥–∞—Ç—ã –≤—ã–±—Ä–∞–Ω—ã, —Å–æ–∑–¥–∞–µ–º –¥–∞—Ç—É
            day = context.user_data['date_selection']['day']
            month = context.user_data['date_selection']['month']
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
                selected_date = datetime(year, month, day)
                
                if selected_date <= datetime.now():
                    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="date_back_to_year")]]
                    await query.edit_message_text(
                        f"‚ùå **–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞**\n\n"
                        f"–í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞: {day:02d}.{month:02d}.{year}\n"
                        f"–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.",
                        reply_markup=InlineKeyboardMarkup(keyboard),
                        parse_mode='Markdown'
                    )
                    return
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–º–∏—Ç
                limit.period = 'custom'
                limit.end_date = selected_date
                db.commit()
                
                keyboard = [[InlineKeyboardButton("üîô –ö –ª–∏–º–∏—Ç–∞–º", callback_data="settings_back")]]
                await query.edit_message_text(
                    f"‚úÖ **–î–∞—Ç–∞ –ª–∏–º–∏—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!**\n\n"
                    f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}\n"
                    f"–õ–∏–º–∏—Ç: {limit.amount} {limit.currency}\n"
                    f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {selected_date.strftime('%d.%m.%Y')}",
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='Markdown'
                )
                
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                context.user_data.pop('date_selection', None)
                
            except ValueError:
                keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="date_back_to_year")]]
                await query.edit_message_text(
                    f"‚ùå **–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞**\n\n"
                    f"–î–∞—Ç–∞ {day:02d}.{month:02d}.{year} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É.",
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='Markdown'
                )
                return
                
        elif data == "date_back_to_day":
            await _show_day_selection(query, context, category, limit)
            
        elif data == "date_back_to_month":
            await _show_month_selection(query, context, category, limit)
            
        elif data == "date_back_to_year":
            await _show_year_selection(query, context, category, limit)
            
    finally:
        db.close()


async def limits_command_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /limits —á–µ—Ä–µ–∑ callback"""
    query = update.callback_query
    await safe_answer_callback(query)
    
    user_id = update.effective_user.id
    
    db = get_db_session()
    try:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        if not user:
            await safe_edit_message(query, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        categories = db.query(Category).filter(Category.user_id == user.id).all()
        
        if not categories:
            await safe_edit_message(query, 
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–∏–º–∏—Ç–æ–≤.\n"
                "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥–æ–π /categories"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–∏–º–∏—Ç—ã
        limits = db.query(Limit).filter(Limit.user_id == user.id).all()
        
        keyboard = []
        
        if limits:
            keyboard.append([InlineKeyboardButton("üìã –ú–æ–∏ –ª–∏–º–∏—Ç—ã", callback_data="limits_view")])
        
        keyboard.extend([
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ª–∏–º–∏—Ç", callback_data="limits_add"),
             InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç", callback_data="limits_edit")],
            [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –ª–∏–º–∏—Ç", callback_data="limits_delete")]
        ])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings_back")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await safe_edit_message(query,
            "üí∞ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞–º–∏**\n\n"
            "–õ–∏–º–∏—Ç—ã –ø–æ–º–æ–≥–∞—é—Ç –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.\n"
            "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ 80% –∏ 100% –ª–∏–º–∏—Ç–∞.",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    finally:
        db.close()
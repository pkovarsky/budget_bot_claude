import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from database import get_db_session, User, Category, Transaction, Limit
from utils.telegram_utils import safe_edit_message, safe_answer_callback

logger = logging.getLogger(__name__)


async def categories_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /categories"""
    user_id = update.effective_user.id
    
    db = get_db_session()
    try:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        if not user:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
            return
        
        categories = db.query(Category).filter(Category.user_id == user.id).all()
        
        if not categories:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")
        
        keyboard = []
        for category in categories:
            emoji = category.emoji if hasattr(category, 'emoji') and category.emoji else "üìÅ"
            keyboard.append([InlineKeyboardButton(
                f"{emoji} {category.name}",
                callback_data=f"cat_view_{category.id}"
            )])
        
        keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="cat_add")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üìÅ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    finally:
        db.close()


async def handle_categories_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    query = update.callback_query
    user_id = update.effective_user.id
    data = query.data
    
    db = get_db_session()
    try:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        if not user:
            await query.edit_message_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
            return
        
        if data == "cat_add":
            keyboard = [
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cat_back")]
            ]
            await query.edit_message_text(
                "üìù **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏**\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n\n"
                "üí° –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            context.user_data['waiting_for_category'] = True
            
        elif data.startswith("cat_view_"):
            category_id = int(data.split("_")[2])
            category = db.query(Category).filter(
                Category.id == category_id,
                Category.user_id == user.id
            ).first()
            
            if not category:
                await query.edit_message_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            total_spent = db.query(Transaction).filter(
                Transaction.user_id == user.id,
                Transaction.category_id == category_id,
                Transaction.amount < 0
            ).all()
            
            total_earned = db.query(Transaction).filter(
                Transaction.user_id == user.id,
                Transaction.category_id == category_id,
                Transaction.amount > 0
            ).all()
            
            spent_sum = sum(abs(t.amount) for t in total_spent)
            earned_sum = sum(t.amount for t in total_earned)
            
            # –õ–∏–º–∏—Ç
            limit = db.query(Limit).filter(
                Limit.user_id == user.id,
                Limit.category_id == category_id
            ).first()
            
            limit_text = f"–õ–∏–º–∏—Ç: {limit.amount} {limit.currency}" if limit else "–õ–∏–º–∏—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            
            keyboard = []
            keyboard.append([InlineKeyboardButton("üòä –ò–∑–º–µ–Ω–∏—Ç—å —Å–º–∞–π–ª–∏–∫", callback_data=f"cat_edit_emoji_{category_id}")])
            if not category.is_default:
                keyboard.append([InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data=f"cat_delete_confirm_{category_id}")])
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            category_emoji = category.emoji if hasattr(category, 'emoji') and category.emoji else "üìÅ"
            await query.edit_message_text(
                f"{category_emoji} **{category.name}**\n\n"
                f"üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {spent_sum:.2f} EUR\n"
                f"üí∞ –ü–æ–ª—É—á–µ–Ω–æ: {earned_sum:.2f} EUR\n"
                f"üìä {limit_text}\n\n"
                f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(total_spent + total_earned)}",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        elif data.startswith("cat_delete_confirm_"):
            category_id = int(data.split("_")[3])
            category = db.query(Category).filter(
                Category.id == category_id,
                Category.user_id == user.id
            ).first()
            
            if not category:
                await query.edit_message_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
            
            if category.is_default:
                await query.edit_message_text("–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –±–∞–∑–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            transactions_count = db.query(Transaction).filter(
                Transaction.category_id == category_id
            ).count()
            
            if transactions_count > 0:
                keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"cat_view_{category_id}")]]
                await query.edit_message_text(
                    f"‚ùå **–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ**\n\n"
                    f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category.name}' —Å–æ–¥–µ—Ä–∂–∏—Ç {transactions_count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–∞.\n\n"
                    f"–°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.",
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='Markdown'
                )
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
            keyboard = [
                [InlineKeyboardButton("üóë –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"cat_delete_final_{category_id}")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cat_view_{category_id}")]
            ]
            
            await query.edit_message_text(
                f"‚ö†Ô∏è **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è**\n\n"
                f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category.name}'?\n\n"
                f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            
        elif data.startswith("cat_delete_final_"):
            category_id = int(data.split("_")[3])
            category = db.query(Category).filter(
                Category.id == category_id,
                Category.user_id == user.id
            ).first()
            
            if not category:
                await query.edit_message_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
            
            # –£–¥–∞–ª—è–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            db.query(Limit).filter(Limit.category_id == category_id).delete()
            
            # –£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            category_name = category.name
            db.delete(category)
            db.commit()
            
            keyboard = [[InlineKeyboardButton("üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="cat_back")]]
            await query.edit_message_text(
                f"‚úÖ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞**\n\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            
        elif data.startswith("cat_edit_emoji_"):
            category_id = int(data.split("_")[3])
            category = db.query(Category).filter(
                Category.id == category_id,
                Category.user_id == user.id
            ).first()
            
            if not category:
                await query.edit_message_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            context.user_data['editing_category_emoji'] = category_id
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å–º–∞–π–ª–∏–∫–∞
            from services.emoji_service import EmojiService
            emoji_service = EmojiService()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å–º–∞–π–ª–∏–∫
            suggested_emoji = emoji_service.get_emoji_by_category_name(category.name)
            current_emoji = category.emoji if hasattr(category, 'emoji') and category.emoji else "üìÅ"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–º–∞–π–ª–∏–∫–∞–º–∏
            keyboard = []
            
            # –ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞ - —Ç–µ–∫—É—â–∏–π —Å–º–∞–π–ª–∏–∫
            keyboard.append([InlineKeyboardButton(
                f"‚úÖ {current_emoji} (—Ç–µ–∫—É—â–∏–π)", 
                callback_data=f"cat_emoji_select_{current_emoji}"
            )])
            
            # –í—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞ - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å–º–∞–π–ª–∏–∫ (–µ—Å–ª–∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ)
            if suggested_emoji != current_emoji:
                keyboard.append([InlineKeyboardButton(
                    f"üí° {suggested_emoji} (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)", 
                    callback_data=f"cat_emoji_select_{suggested_emoji}"
                )])
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–º–∞–π–ª–∏–∫–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            emoji_keyboard = emoji_service.get_emoji_keyboard_for_category(category.name)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–º–∞–π–ª–∏–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            for emoji_row in emoji_keyboard:
                button_row = []
                for emoji in emoji_row:
                    if emoji != current_emoji and emoji != suggested_emoji:
                        button_row.append(InlineKeyboardButton(
                            emoji, 
                            callback_data=f"cat_emoji_select_{emoji}"
                        ))
                if button_row:
                    keyboard.append(button_row)
            
            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard.append([
                InlineKeyboardButton("üìÇ –ë–æ–ª—å—à–µ —Å–º–∞–π–ª–∏–∫–æ–≤", callback_data="cat_more_emojis"),
                InlineKeyboardButton("üìÅ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é", callback_data="cat_emoji_select_üìÅ")
            ])
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"cat_view_{category_id}")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                f"üòä **–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–º–∞–π–ª–∏–∫–∞ –¥–ª—è '{category.name}'**\n\n"
                f"–¢–µ–∫—É—â–∏–π —Å–º–∞–π–ª–∏–∫: {current_emoji}\n"
                f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π: {suggested_emoji}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å–º–∞–π–ª–∏–∫:",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        elif data.startswith("cat_emoji_select_"):
            category_id = context.user_data.get('editing_category_emoji')
            if not category_id:
                await query.edit_message_text("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return
            
            selected_emoji = data.replace("cat_emoji_select_", "")
            
            category = db.query(Category).filter(
                Category.id == category_id,
                Category.user_id == user.id
            ).first()
            
            if not category:
                await query.edit_message_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–º–∞–π–ª–∏–∫
            category.emoji = selected_emoji
            db.commit()
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            context.user_data.pop('editing_category_emoji', None)
            
            await query.edit_message_text(
                f"‚úÖ **–°–º–∞–π–ª–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω!**\n\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {selected_emoji} {category.name}\n\n"
                f"–ù–æ–≤—ã–π —Å–º–∞–π–ª–∏–∫: {selected_emoji}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data=f"cat_view_{category_id}")
                ]]),
                parse_mode='Markdown'
            )
            
        elif data == "cat_more_emojis":
            category_id = context.user_data.get('editing_category_emoji')
            if not category_id:
                await query.edit_message_text("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–ª—å—à–µ —Å–º–∞–π–ª–∏–∫–æ–≤
            from services.emoji_service import EmojiService
            emoji_service = EmojiService()
            popular_emojis = emoji_service.get_popular_emojis()
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ —Å–º–∞–π–ª–∏–∫–∞–º–∏
            keyboard = []
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 5 —Å–º–∞–π–ª–∏–∫–æ–≤
            for i in range(0, len(popular_emojis), 5):
                row = []
                for emoji in popular_emojis[i:i+5]:
                    row.append(InlineKeyboardButton(
                        emoji, 
                        callback_data=f"cat_emoji_select_{emoji}"
                    ))
                keyboard.append(row)
            
            # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"cat_edit_emoji_{category_id}")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            category = db.query(Category).filter(
                Category.id == category_id,
                Category.user_id == user.id
            ).first()
            
            category_name = category.name if category else '–∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
            await query.edit_message_text(
                f"üòä **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–º–∞–π–ª–∏–∫–∏ –¥–ª—è '{category_name}'**\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–º–∞–π–ª–∏–∫:",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        elif data == "cat_back":
            context.user_data.pop('waiting_for_category', None)
            context.user_data.pop('editing_category_emoji', None)
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            categories = db.query(Category).filter(Category.user_id == user.id).all()
            
            keyboard = []
            for category in categories:
                emoji = category.emoji if hasattr(category, 'emoji') and category.emoji else "üìÅ"
                keyboard.append([InlineKeyboardButton(
                    f"{emoji} {category.name}",
                    callback_data=f"cat_view_{category.id}"
                )])
            
            keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="cat_add")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "üìÅ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏**\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é:",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        
    finally:
        db.close()


async def categories_command_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /categories —á–µ—Ä–µ–∑ callback"""
    query = update.callback_query
    await safe_answer_callback(query)
    
    user_id = update.effective_user.id
    
    db = get_db_session()
    try:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        if not user:
            await safe_edit_message(query, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
            return
        
        categories = db.query(Category).filter(Category.user_id == user.id).all()
        
        keyboard = []
        keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="cat_add")])
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for category in categories:
            category_emoji = category.emoji if hasattr(category, 'emoji') and category.emoji else "üìÅ"
            keyboard.append([InlineKeyboardButton(
                f"{category_emoji} {category.name}",
                callback_data=f"cat_view_{category.id}"
            )])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await safe_edit_message(query,
            "üìÅ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    finally:
        db.close()
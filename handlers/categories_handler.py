import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from database import get_db_session, User, Category, Transaction, Limit

logger = logging.getLogger(__name__)


async def categories_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /categories"""
    user_id = update.effective_user.id
    
    db = get_db_session()
    try:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        if not user:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
            return
        
        categories = db.query(Category).filter(Category.user_id == user.id).all()
        
        if not categories:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")
        
        keyboard = []
        for category in categories:
            keyboard.append([InlineKeyboardButton(
                f"üìÅ {category.name}",
                callback_data=f"cat_view_{category.id}"
            )])
        
        keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="cat_add")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üìÅ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏**\\n\\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    finally:
        db.close()


async def handle_categories_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    query = update.callback_query
    user_id = update.effective_user.id
    data = query.data
    
    db = get_db_session()
    try:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        if not user:
            await query.edit_message_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
            return
        
        if data == "cat_add":
            await query.edit_message_text(
                "üìù **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏**\\n\\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:"
            )
            context.user_data['waiting_for_category'] = True
            
        elif data.startswith("cat_view_"):
            category_id = int(data.split("_")[2])
            category = db.query(Category).filter(
                Category.id == category_id,
                Category.user_id == user.id
            ).first()
            
            if not category:
                await query.edit_message_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            total_spent = db.query(Transaction).filter(
                Transaction.user_id == user.id,
                Transaction.category_id == category_id,
                Transaction.amount < 0
            ).all()
            
            total_earned = db.query(Transaction).filter(
                Transaction.user_id == user.id,
                Transaction.category_id == category_id,
                Transaction.amount > 0
            ).all()
            
            spent_sum = sum(abs(t.amount) for t in total_spent)
            earned_sum = sum(t.amount for t in total_earned)
            
            # –õ–∏–º–∏—Ç
            limit = db.query(Limit).filter(
                Limit.user_id == user.id,
                Limit.category_id == category_id
            ).first()
            
            limit_text = f"–õ–∏–º–∏—Ç: {limit.amount} {limit.currency}" if limit else "–õ–∏–º–∏—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            
            keyboard = []
            if not category.is_default:
                keyboard.append([InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data=f"cat_delete_{category_id}")])
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="cat_back")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                f"üìÅ **{category.name}**\\n\\n"
                f"üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {spent_sum:.2f} EUR\\n"
                f"üí∞ –ü–æ–ª—É—á–µ–Ω–æ: {earned_sum:.2f} EUR\\n"
                f"üìä {limit_text}\\n\\n"
                f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(total_spent + total_earned)}",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        elif data.startswith("cat_delete_"):
            category_id = int(data.split("_")[2])
            category = db.query(Category).filter(
                Category.id == category_id,
                Category.user_id == user.id
            ).first()
            
            if not category:
                await query.edit_message_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
            
            if category.is_default:
                await query.edit_message_text("–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –±–∞–∑–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            transactions_count = db.query(Transaction).filter(
                Transaction.category_id == category_id
            ).count()
            
            if transactions_count > 0:
                await query.edit_message_text(
                    f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category.name}' —Å–æ–¥–µ—Ä–∂–∏—Ç {transactions_count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–∞."
                )
                return
            
            # –£–¥–∞–ª—è–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            db.query(Limit).filter(Limit.category_id == category_id).delete()
            
            # –£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            db.delete(category)
            db.commit()
            
            await query.edit_message_text(
                f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category.name}' —É–¥–∞–ª–µ–Ω–∞."
            )
            
        elif data == "cat_back":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            categories = db.query(Category).filter(Category.user_id == user.id).all()
            
            keyboard = []
            for category in categories:
                keyboard.append([InlineKeyboardButton(
                    f"üìÅ {category.name}",
                    callback_data=f"cat_view_{category.id}"
                )])
            
            keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="cat_add")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "üìÅ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏**\\n\\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é:",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        
    finally:
        db.close()
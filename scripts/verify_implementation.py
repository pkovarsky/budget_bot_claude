#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π Budget Bot
"""

import asyncio
from services.openai_service import OpenAIService
from services.chart_service import ChartService
import os

def check_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤...")
    
    required_files = [
        'bot.py',
        'openai_service.py',
        'chart_service.py',
        'database.py',
        'config.py',
        'handlers/categories_handler.py',
        'handlers/stats_handler.py',
        'handlers/enhanced_transaction_handler.py',
        'utils/parsers.py',
        'requirements.txt'
    ]
    
    all_found = True
    for file_path in required_files:
        if os.path.exists(file_path):
            print(f"‚úÖ {file_path}")
        else:
            print(f"‚ùå {file_path} - –ù–ï –ù–ê–ô–î–ï–ù")
            all_found = False
    
    return all_found

async def test_openai_optimization():
    """–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ OpenAI"""
    print("\nüí∞ –¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ ChatGPT...")
    
    service = OpenAIService()
    categories = ['–ü—Ä–æ–¥—É–∫—Ç—ã', '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', '–ó–¥–æ—Ä–æ–≤—å–µ', '–ü—Ä–æ—á–µ–µ']
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ
    test_cases = [
        ('–ø–æ–∫—É–ø–∫–∞ –≤ –∞—à–∞–Ω–µ', '–ü—Ä–æ–¥—É–∫—Ç—ã'),
        ('—Ç–∞–∫—Å–∏ uber', '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç'),
        ('–∞–ø—Ç–µ–∫–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞', '–ó–¥–æ—Ä–æ–≤—å–µ'),
        ('lidl grocery', '–ü—Ä–æ–¥—É–∫—Ç—ã'),
        ('–º–µ—Ç—Ä–æ –ø–æ–µ–∑–¥–∫–∞', '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç'),
        ('pharmacy medicine', '–ó–¥–æ—Ä–æ–≤—å–µ'),
    ]
    
    success_count = 0
    for description, expected_category in test_cases:
        try:
            result = await service.categorize_transaction(description, categories)
            if result == expected_category:
                print(f"‚úÖ '{description}' -> {result}")
                success_count += 1
            else:
                print(f"‚ö†Ô∏è  '{description}' -> {result} (–æ–∂–∏–¥–∞–ª—Å—è {expected_category})")
        except Exception as e:
            print(f"‚ùå '{description}' -> –û—à–∏–±–∫–∞: {e}")
    
    print(f"üìä –õ–æ–∫–∞–ª—å–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è: {success_count}/{len(test_cases)} —É—Å–ø–µ—à–Ω—ã—Ö")
    return success_count == len(test_cases)

def test_chart_generation():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
    print("\nüìä –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤...")
    
    try:
        chart_service = ChartService()
        
        # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ü–≤–µ—Ç–æ–≤
        colors = chart_service._generate_colors(5)
        print(f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤: {len(colors)} —Ü–≤–µ—Ç–æ–≤")
        
        # –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É–º–º
        formatted = chart_service._format_amount(1500)
        print(f"‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º: 1500 -> {formatted}")
        
        print("‚úÖ –°–µ—Ä–≤–∏—Å –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–µ—Ä–≤–∏—Å–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}")
        return False

def test_features():
    """–¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∏—á"""
    print("\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∏—á...")
    
    features = [
        "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —é–∑–µ—Ä–∞",
        "‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ ChatGPT (–ª–æ–∫–∞–ª—å–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è)",
        "‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Å–∏–≤—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
        "‚úÖ –ö—Ä—É–≥–æ–≤—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã —Ä–∞—Å—Ö–æ–¥–æ–≤",
        "‚úÖ –¢—Ä–µ–Ω–¥—ã —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –¥–Ω—è–º",
        "‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –º–µ—Å—è—Ü–∞–º",
        "‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π",
        "‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –≤–∞–ª—é—Ç",
        "‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —á–µ–∫–æ–≤",
        "‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"
    ]
    
    for feature in features:
        print(feature)
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ Budget Bot - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
    files_ok = check_files()
    
    # –¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    optimization_ok = asyncio.run(test_openai_optimization())
    
    # –¢–µ—Å—Ç –≥—Ä–∞—Ñ–∏–∫–æ–≤
    charts_ok = test_chart_generation()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏—á
    features_ok = test_features()
    
    print("\nüìã –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç:")
    print("=" * 30)
    print(f"üìÅ –§–∞–π–ª—ã: {'‚úÖ' if files_ok else '‚ùå'}")
    print(f"üí∞ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è ChatGPT: {'‚úÖ' if optimization_ok else '‚ùå'}")
    print(f"üìä –ì—Ä–∞—Ñ–∏–∫–∏: {'‚úÖ' if charts_ok else '‚ùå'}")
    print(f"üéØ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∏—á–∏: {'‚úÖ' if features_ok else '‚ùå'}")
    
    if all([files_ok, optimization_ok, charts_ok, features_ok]):
        print("\nüéâ –í–°–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø –í–´–ü–û–õ–ù–ï–ù–´!")
        print("\nüìù –°–≤–æ–¥–∫–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:")
        print("1. ‚úÖ –í—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—é")
        print("2. ‚úÖ –í—Å–µ —Ñ–∏—á–∏ –≤ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
        print("3. ‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∑–∞–ø—Ä–æ—Å—ã –∫ ChatGPT")
        print("4. ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –∫—Ä–∞—Å–∏–≤—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏")
        print("5. ‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        print("6. ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã")
        return True
    else:
        print("\n‚ö†Ô∏è  –ï—Å—Ç—å –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è")
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
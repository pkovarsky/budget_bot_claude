"""
–°–∏—Å—Ç–µ–º–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –±—é–¥–∂–µ—Ç-–±–æ—Ç–∞
"""
import asyncio
import logging
from datetime import datetime, time, timedelta
from typing import List, Optional
import pytz
from telegram import Bot
from telegram.error import TelegramError

from database import get_db_session, User, Category, Transaction, Limit
from utils.localization import get_message

logger = logging.getLogger(__name__)

class NotificationScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self, bot: Bot):
        self.bot = bot
        self.running = False
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.running = True
        logger.info("–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        
        while self.running:
            try:
                await self._check_daily_reminders()
                await self._check_budget_notifications()
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                await asyncio.sleep(60)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
                await asyncio.sleep(60)
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.running = False
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    
    async def _check_daily_reminders(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞—Ç"""
        db = get_db_session()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
            users = db.query(User).filter(
                User.daily_reminder_enabled == True,
                User.daily_reminder_time.isnot(None)
            ).all()
            
            for user in users:
                await self._send_daily_reminder_if_needed(user)
                
        finally:
            db.close()
    
    async def _send_daily_reminder_if_needed(self, user: User):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ç—Ä–∞—Ç–∞—Ö –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_tz = pytz.timezone(user.timezone)
            current_time = datetime.now(user_tz).time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            # (—Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ –º–∏–Ω—É—Ç—ã)
            reminder_time = user.daily_reminder_time
            if (current_time.hour == reminder_time.hour and 
                current_time.minute == reminder_time.minute):
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–ª—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç—Ä–∞—Ç—ã —Å–µ–≥–æ–¥–Ω—è
                today = datetime.now(user_tz).date()
                today_start = datetime.combine(today, time.min).replace(tzinfo=user_tz)
                today_end = datetime.combine(today, time.max).replace(tzinfo=user_tz)
                
                db = get_db_session()
                try:
                    today_transactions = db.query(Transaction).filter(
                        Transaction.user_id == user.id,
                        Transaction.created_at >= today_start,
                        Transaction.created_at <= today_end
                    ).count()
                    
                    # –ï—Å–ª–∏ –Ω–µ—Ç —Ç—Ä–∞—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                    if today_transactions == 0:
                        message = get_message("daily_reminder", user.language)
                        await self.bot.send_message(
                            chat_id=user.telegram_id,
                            text=message,
                            parse_mode='Markdown'
                        )
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}")
                        
                finally:
                    db.close()
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
    
    async def _check_budget_notifications(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –±—é–¥–∂–µ—Ç–µ"""
        db = get_db_session()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ –±—é–¥–∂–µ—Ç–µ
            users = db.query(User).filter(
                User.budget_notifications_enabled == True,
                User.budget_notification_time.isnot(None),
                User.salary_date.isnot(None)
            ).all()
            
            for user in users:
                await self._send_budget_notification_if_needed(user)
                
        finally:
            db.close()
    
    async def _send_budget_notification_if_needed(self, user: User):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±—é–¥–∂–µ—Ç–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_tz = pytz.timezone(user.timezone)
            current_time = datetime.now(user_tz).time()
            current_date = datetime.now(user_tz).date()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            notification_time = user.budget_notification_time
            if (current_time.hour == notification_time.hour and 
                current_time.minute == notification_time.minute):
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–æ—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                should_send = False
                
                if user.budget_notification_frequency == "daily":
                    should_send = True
                elif user.budget_notification_frequency == "weekly":
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
                    should_send = current_date.weekday() == 0
                
                if should_send:
                    await self._send_budget_status(user)
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±—é–¥–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
    
    async def _send_budget_status(self, user: User):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±—é–¥–∂–µ—Ç–∞"""
        try:
            db = get_db_session()
            try:
                # –í—ã—á–∏—Å–ª—è–µ–º –¥–Ω–∏ –¥–æ –∑–∞—Ä–ø–ª–∞—Ç—ã
                user_tz = pytz.timezone(user.timezone)
                today = datetime.now(user_tz).date()
                
                # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â—É—é –¥–∞—Ç—É –∑–∞—Ä–ø–ª–∞—Ç—ã
                next_salary_date = self._get_next_salary_date(today, user.salary_date)
                days_until_salary = (next_salary_date - today).days
                
                # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                limits = db.query(Limit).filter(Limit.user_id == user.id).all()
                
                if not limits:
                    return
                
                message_parts = [
                    f"üí∞ **–°—Ç–∞—Ç—É—Å –±—é–¥–∂–µ—Ç–∞**\n",
                    f"üìÖ –î–æ –∑–∞—Ä–ø–ª–∞—Ç—ã: {days_until_salary} –¥–Ω–µ–π\n"
                ]
                
                for limit in limits:
                    category = db.query(Category).filter(Category.id == limit.category_id).first()
                    if not category:
                        continue
                    
                    # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—É—é —Å—É–º–º—É —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞—Ä–ø–ª–∞—Ç—ã
                    last_salary_date = self._get_last_salary_date(today, user.salary_date)
                    spent = self._calculate_spent_since_date(db, user.id, limit.category_id, last_salary_date, limit.currency)
                    
                    remaining = limit.amount - spent
                    daily_budget = remaining / max(days_until_salary, 1) if days_until_salary > 0 else 0
                    
                    category_emoji = category.emoji if hasattr(category, 'emoji') and category.emoji else "üìÅ"
                    
                    message_parts.append(
                        f"{category_emoji} **{category.name}**\n"
                        f"   –û—Å—Ç–∞–ª–æ—Å—å: {remaining:.2f} {limit.currency}\n"
                        f"   –ú–æ–∂–Ω–æ —Ç—Ä–∞—Ç–∏—Ç—å –≤ –¥–µ–Ω—å: {daily_budget:.2f} {limit.currency}\n"
                    )
                
                message = "\n".join(message_parts)
                
                await self.bot.send_message(
                    chat_id=user.telegram_id,
                    text=message,
                    parse_mode='Markdown'
                )
                
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –±—é–¥–∂–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}")
                
            finally:
                db.close()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±—é–¥–∂–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
    
    def _get_next_salary_date(self, current_date: datetime.date, salary_day: int) -> datetime.date:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –¥–∞—Ç—É –∑–∞—Ä–ø–ª–∞—Ç—ã"""
        current_month = current_date.month
        current_year = current_date.year
        
        # –ü—Ä–æ–±—É–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        try:
            next_salary = current_date.replace(day=salary_day)
            if next_salary > current_date:
                return next_salary
        except ValueError:
            # –ï—Å–ª–∏ day –±–æ–ª—å—à–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ, –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å
            import calendar
            last_day = calendar.monthrange(current_year, current_month)[1]
            next_salary = current_date.replace(day=min(salary_day, last_day))
            if next_salary > current_date:
                return next_salary
        
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü, –±–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–∏–π
        next_month = current_month + 1
        next_year = current_year
        if next_month > 12:
            next_month = 1
            next_year += 1
        
        try:
            return datetime.date(next_year, next_month, salary_day)
        except ValueError:
            import calendar
            last_day = calendar.monthrange(next_year, next_month)[1]
            return datetime.date(next_year, next_month, min(salary_day, last_day))
    
    def _get_last_salary_date(self, current_date: datetime.date, salary_day: int) -> datetime.date:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∞—Ç—É –∑–∞—Ä–ø–ª–∞—Ç—ã"""
        current_month = current_date.month
        current_year = current_date.year
        
        # –ü—Ä–æ–±—É–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        try:
            last_salary = current_date.replace(day=salary_day)
            if last_salary <= current_date:
                return last_salary
        except ValueError:
            # –ï—Å–ª–∏ day –±–æ–ª—å—à–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ, –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å
            import calendar
            last_day = calendar.monthrange(current_year, current_month)[1]
            last_salary = current_date.replace(day=min(salary_day, last_day))
            if last_salary <= current_date:
                return last_salary
        
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü, –±–µ—Ä–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π
        prev_month = current_month - 1
        prev_year = current_year
        if prev_month < 1:
            prev_month = 12
            prev_year -= 1
        
        try:
            return datetime.date(prev_year, prev_month, salary_day)
        except ValueError:
            import calendar
            last_day = calendar.monthrange(prev_year, prev_month)[1]
            return datetime.date(prev_year, prev_month, min(salary_day, last_day))
    
    def _calculate_spent_since_date(self, db, user_id: int, category_id: int, since_date: datetime.date, currency: str) -> float:
        """–í—ã—á–∏—Å–ª–∏—Ç—å –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—É—é —Å—É–º–º—É —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –¥–∞—Ç—ã"""
        since_datetime = datetime.combine(since_date, time.min)
        
        transactions = db.query(Transaction).filter(
            Transaction.user_id == user_id,
            Transaction.category_id == category_id,
            Transaction.currency == currency,
            Transaction.amount < 0,  # –¢–æ–ª—å–∫–æ —Ä–∞—Å—Ö–æ–¥—ã
            Transaction.created_at >= since_datetime
        ).all()
        
        return sum(abs(transaction.amount) for transaction in transactions)
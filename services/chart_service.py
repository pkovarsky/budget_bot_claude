import matplotlib
matplotlib.use('Agg')  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å non-interactive backend
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import matplotlib.patheffects
from matplotlib.patches import Wedge
import pandas as pd
import numpy as np
from io import BytesIO
from typing import List, Dict, Optional
import logging
from datetime import datetime, timedelta
from database import get_db_session, User, Transaction, Category
from sqlalchemy import func

logger = logging.getLogger(__name__)

class ChartService:
    def __init__(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã –¥–ª—è –∫—Ä–∞—Å–∏–≤—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
        plt.style.use('dark_background')
        plt.rcParams['font.size'] = 12
        plt.rcParams['figure.figsize'] = (12, 9)
        plt.rcParams['axes.facecolor'] = '#1e1e1e'
        plt.rcParams['figure.facecolor'] = '#2b2b2b'
        plt.rcParams['text.color'] = '#ffffff'
        plt.rcParams['axes.labelcolor'] = '#ffffff'
        plt.rcParams['xtick.color'] = '#ffffff'
        plt.rcParams['ytick.color'] = '#ffffff'
        plt.rcParams['axes.edgecolor'] = '#444444'
        plt.rcParams['axes.grid'] = True
        plt.rcParams['grid.alpha'] = 0.2
        plt.rcParams['grid.color'] = '#444444'
        plt.rcParams['axes.spines.left'] = True
        plt.rcParams['axes.spines.bottom'] = True
        plt.rcParams['axes.spines.top'] = False
        plt.rcParams['axes.spines.right'] = False
        
    def generate_category_pie_chart(self, user_id: int, period_days: int = 30) -> Optional[BytesIO]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        """
        db = get_db_session()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = db.query(User).filter(User.telegram_id == user_id).first()
            if not user:
                return None
            
            # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞
            start_date = datetime.now() - timedelta(days=period_days)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            expenses_by_category = db.query(
                Category.name,
                func.sum(func.abs(Transaction.amount)).label('total_amount')
            ).join(
                Transaction, Transaction.category_id == Category.id
            ).filter(
                Transaction.user_id == user.id,
                Transaction.amount < 0,  # –¢–æ–ª—å–∫–æ —Ä–∞—Å—Ö–æ–¥—ã
                Transaction.created_at >= start_date
            ).group_by(Category.name).all()
            
            if not expenses_by_category:
                return None
                
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
            categories = [item[0] for item in expenses_by_category]
            amounts = [float(item[1]) for item in expenses_by_category]
            
            # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—É—é —Ü–≤–µ—Ç–æ–≤—É—é –ø–∞–ª–∏—Ç—Ä—É
            colors = self._generate_colors(len(categories))
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É —Å —Ç–µ–º–Ω—ã–º —Ñ–æ–Ω–æ–º
            fig, ax = plt.subplots(figsize=(14, 12))
            fig.patch.set_facecolor('#2b2b2b')
            
            # –°—Ç—Ä–æ–∏–º –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É —Å —Ç–µ–Ω—è–º–∏ –∏ —É–ª—É—á—à–µ–Ω–Ω—ã–º —Å—Ç–∏–ª–µ–º
            wedges, texts, autotexts = ax.pie(
                amounts,
                labels=categories,
                colors=colors,
                autopct=lambda pct: f'{pct:.1f}%\n{self._format_amount(pct * sum(amounts) / 100)}‚Ç¨',
                startangle=90,
                textprops={'fontsize': 11, 'fontweight': 'bold', 'color': '#ffffff'},
                pctdistance=0.82,
                labeldistance=1.05,
                wedgeprops=dict(width=0.8, edgecolor='#2b2b2b', linewidth=2),
                shadow=True
            )
            
            # –£–ª—É—á—à–∞–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã—Ö –º–µ—Ç–æ–∫
            for autotext in autotexts:
                autotext.set_color('#000000')
                autotext.set_fontsize(10)
                autotext.set_fontweight('bold')
                autotext.set_bbox(dict(boxstyle='round,pad=0.3', facecolor='white', alpha=0.8))
            
            # –£–ª—É—á—à–∞–µ–º –ø–æ–¥–ø–∏—Å–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            for text in texts:
                text.set_color('#ffffff')
                text.set_fontsize(12)
                text.set_fontweight('bold')
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –¥–∞—Ç–∞–º–∏
            total_amount = sum(amounts)
            end_date = datetime.now()
            start_date_str = start_date.strftime('%d.%m.%Y')
            end_date_str = end_date.strftime('%d.%m.%Y')
            ax.set_title(
                f'üí∞ –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n'
                f'üìÖ {start_date_str} - {end_date_str} ({period_days} –¥–Ω–µ–π)\n'
                f'üí∏ –û–±—â–∞—è —Å—É–º–º–∞: {self._format_amount(total_amount)}‚Ç¨',
                fontsize=18,
                fontweight='bold',
                color='#ffffff',
                pad=30
            )
            
            # –î–µ–ª–∞–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É –∫—Ä—É–≥–ª–æ–π
            ax.set_aspect('equal')
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª—å–Ω—É—é –ª–µ–≥–µ–Ω–¥—É
            legend_labels = [f'{cat}: {self._format_amount(amt)}‚Ç¨' for cat, amt in zip(categories, amounts)]
            legend = ax.legend(
                wedges,
                legend_labels,
                title="üìä –ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
                loc="center left",
                bbox_to_anchor=(1, 0, 0.5, 1),
                fontsize=11,
                title_fontsize=13,
                frameon=True,
                facecolor='#1e1e1e',
                edgecolor='#444444',
                framealpha=0.9
            )
            legend.get_title().set_color('#ffffff')
            for text in legend.get_texts():
                text.set_color('#ffffff')
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã
            plt.tight_layout()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
            buffer = BytesIO()
            plt.savefig(buffer, format='png', dpi=300, bbox_inches='tight')
            buffer.seek(0)
            
            plt.close()
            
            return buffer
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã: {e}")
            return None
        finally:
            db.close()
    
    def generate_spending_trends_chart(self, user_id: int, period_days: int = 30) -> Optional[BytesIO]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–¥–æ–≤ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –¥–Ω—è–º
        """
        db = get_db_session()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = db.query(User).filter(User.telegram_id == user_id).first()
            if not user:
                return None
            
            # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞
            start_date = datetime.now() - timedelta(days=period_days)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö –ø–æ –¥–Ω—è–º
            daily_expenses = db.query(
                func.date(Transaction.created_at).label('date'),
                func.sum(func.abs(Transaction.amount)).label('total_amount')
            ).filter(
                Transaction.user_id == user.id,
                Transaction.amount < 0,  # –¢–æ–ª—å–∫–æ —Ä–∞—Å—Ö–æ–¥—ã
                Transaction.created_at >= start_date
            ).group_by(func.date(Transaction.created_at)).all()
            
            if not daily_expenses:
                return None
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            dates = [item[0] for item in daily_expenses]
            amounts = [float(item[1]) for item in daily_expenses]
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É —Å —Ç–µ–º–Ω—ã–º —Ñ–æ–Ω–æ–º
            fig, ax = plt.subplots(figsize=(16, 10))
            fig.patch.set_facecolor('#2b2b2b')
            
            # –°—Ç—Ä–æ–∏–º –∫—Ä–∞—Å–∏–≤—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
            ax.plot(dates, amounts, 
                   marker='o', linewidth=3, markersize=8, 
                   color='#00D4AA', markerfacecolor='#00FFD0', 
                   markeredgecolor='#00A67C', markeredgewidth=2,
                   linestyle='-', alpha=0.9)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—É—é –∑–∞–ª–∏–≤–∫—É
            ax.fill_between(dates, amounts, alpha=0.4, 
                           color='#00D4AA', interpolate=True)
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Å–∏ —Å —ç–º–æ–¥–∑–∏
            ax.set_xlabel('üìÖ –î–∞—Ç–∞', fontsize=14, fontweight='bold', color='#ffffff')
            ax.set_ylabel('üí∞ –°—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ (‚Ç¨)', fontsize=14, fontweight='bold', color='#ffffff')
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –¥–∞—Ç–∞–º–∏
            end_date = datetime.now()
            start_date_str = start_date.strftime('%d.%m.%Y')
            end_date_str = end_date.strftime('%d.%m.%Y')
            ax.set_title(
                f'üìà –¢—Ä–µ–Ω–¥ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –¥–Ω—è–º\n'
                f'üìÖ {start_date_str} - {end_date_str} ({period_days} –¥–Ω–µ–π)',
                fontsize=18,
                fontweight='bold',
                color='#ffffff',
                pad=25
            )
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –Ω–∞ –æ—Å–∏ x
            ax.tick_params(axis='x', rotation=45)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ç–∫—É
            ax.grid(True, alpha=0.3)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            avg_daily = sum(amounts) / len(amounts)
            max_daily = max(amounts)
            total_amount = sum(amounts)
            
            stats_text = f'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n'
            stats_text += f'üìà –°—Ä–µ–¥–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –≤ –¥–µ–Ω—å: {self._format_amount(avg_daily)}‚Ç¨\n'
            stats_text += f'üîù –ú–∞–∫—Å–∏–º—É–º –∑–∞ –¥–µ–Ω—å: {self._format_amount(max_daily)}‚Ç¨\n'
            stats_text += f'üí∏ –û–±—â–∞—è —Å—É–º–º–∞: {self._format_amount(total_amount)}‚Ç¨'
            
            ax.text(0.02, 0.98, stats_text, transform=ax.transAxes, 
                   fontsize=12, verticalalignment='top', color='#ffffff',
                   bbox=dict(boxstyle='round,pad=0.8', facecolor='#1e1e1e', 
                           edgecolor='#00D4AA', linewidth=2, alpha=0.9))
            
            plt.tight_layout()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
            buffer = BytesIO()
            plt.savefig(buffer, format='png', dpi=300, bbox_inches='tight')
            buffer.seek(0)
            
            plt.close()
            
            return buffer
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤: {e}")
            return None
        finally:
            db.close()
    
    def generate_monthly_comparison_chart(self, user_id: int, months: int = 6) -> Optional[BytesIO]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º
        """
        db = get_db_session()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = db.query(User).filter(User.telegram_id == user_id).first()
            if not user:
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö –ø–æ –º–µ—Å—è—Ü–∞–º
            monthly_expenses = db.query(
                func.strftime('%Y-%m', Transaction.created_at).label('month'),
                func.sum(func.abs(Transaction.amount)).label('total_amount')
            ).filter(
                Transaction.user_id == user.id,
                Transaction.amount < 0,  # –¢–æ–ª—å–∫–æ —Ä–∞—Å—Ö–æ–¥—ã
                Transaction.created_at >= datetime.now() - timedelta(days=months * 30)
            ).group_by(func.strftime('%Y-%m', Transaction.created_at)).all()
            
            if not monthly_expenses:
                return None
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            months_labels = [item[0] for item in monthly_expenses]
            amounts = [float(item[1]) for item in monthly_expenses]
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É —Å —Ç–µ–º–Ω—ã–º —Ñ–æ–Ω–æ–º
            fig, ax = plt.subplots(figsize=(14, 10))
            fig.patch.set_facecolor('#2b2b2b')
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Å—Ç–æ–ª–±—Ü–æ–≤
            gradient_colors = self._generate_gradient_colors(len(amounts))
            
            # –°—Ç—Ä–æ–∏–º —Å—Ç–∏–ª—å–Ω—É—é —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
            bars = ax.bar(months_labels, amounts, 
                         color=gradient_colors, alpha=0.9,
                         edgecolor='#ffffff', linewidth=1.5)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–Ω–∏ –∫ —Å—Ç–æ–ª–±—Ü–∞–º
            for bar in bars:
                bar.set_path_effects([plt.matplotlib.patheffects.SimplePatchShadow(offset=(1, -1), 
                                     shadow_rgbFace='black', alpha=0.3)])
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
            for bar, amount in zip(bars, amounts):
                height = bar.get_height()
                ax.text(bar.get_x() + bar.get_width()/2., height + max(amounts) * 0.01,
                       f'{self._format_amount(amount)}‚Ç¨',
                       ha='center', va='bottom', fontweight='bold', 
                       fontsize=11, color='#ffffff',
                       bbox=dict(boxstyle='round,pad=0.3', facecolor='#1e1e1e', 
                               edgecolor='#00D4AA', alpha=0.8))
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Å–∏ —Å —ç–º–æ–¥–∑–∏
            ax.set_xlabel('üìÖ –ú–µ—Å—è—Ü', fontsize=14, fontweight='bold', color='#ffffff')
            ax.set_ylabel('üí∞ –°—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ (‚Ç¨)', fontsize=14, fontweight='bold', color='#ffffff')
            ax.set_title(
                f'üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º\n'
                f'üìà –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {months} –º–µ—Å—è—Ü–µ–≤',
                fontsize=18,
                fontweight='bold',
                color='#ffffff',
                pad=25
            )
            
            # –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∏ –º–µ—Å—è—Ü–µ–≤
            ax.tick_params(axis='x', rotation=45)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ç–∫—É
            ax.grid(True, alpha=0.3, axis='y')
            
            plt.tight_layout()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
            buffer = BytesIO()
            plt.savefig(buffer, format='png', dpi=300, bbox_inches='tight')
            buffer.seek(0)
            
            plt.close()
            
            return buffer
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
            return None
        finally:
            db.close()
    
    def _generate_colors(self, n: int) -> List[str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∞—Å–∏–≤—É—é —Ü–≤–µ—Ç–æ–≤—É—é –ø–∞–ª–∏—Ç—Ä—É –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
        """
        # –Ø—Ä–∫–∏–µ –Ω–µ–æ–Ω–æ–≤—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
        colors = [
            '#FF6B9D', '#4ECDC4', '#45B7D1', '#96CEB4', '#FECA57',
            '#FF9FF3', '#54A0FF', '#5F27CD', '#00D2D3', '#FF9F43',
            '#10AC84', '#EE5A24', '#0652DD', '#9C88FF', '#FFC312',
            '#C4E538', '#12CBC4', '#FDA7DF', '#ED4C67', '#F79F1F',
            '#FF3838', '#00D4AA', '#FF6B35', '#7B68EE', '#20B2AA'
        ]
        
        if n <= len(colors):
            return colors[:n]
        else:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —è—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞
            additional_colors = []
            for i in range(n - len(colors)):
                hue = (i * 360 / (n - len(colors))) % 360
                additional_colors.append(f'hsl({hue}, 80%, 65%)')
            return colors + additional_colors

    def _generate_gradient_colors(self, n: int) -> List[str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Å—Ç–æ–ª–±—á–∞—Ç—ã—Ö –¥–∏–∞–≥—Ä–∞–º–º
        """
        # –ì—Ä–∞–¥–∏–µ–Ω—Ç –æ—Ç —Å–∏–Ω–µ–≥–æ –∫ —Ñ–∏–æ–ª–µ—Ç–æ–≤–æ–º—É –∫ —Ä–æ–∑–æ–≤–æ–º—É
        base_colors = ['#00D4AA', '#00A8FF', '#9C88FF', '#FF6B9D', '#FF3838']
        
        if n <= len(base_colors):
            return base_colors[:n]
        
        # –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
        import numpy as np
        colors = []
        for i in range(n):
            ratio = i / (n - 1) if n > 1 else 0
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É —Ü–≤–µ—Ç–∞–º–∏
            if ratio <= 0.25:
                colors.append('#00D4AA')
            elif ratio <= 0.5:
                colors.append('#00A8FF')
            elif ratio <= 0.75:
                colors.append('#9C88FF')
            else:
                colors.append('#FF6B9D')
        
        return colors
    
    def _format_amount(self, amount: float) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        """
        if amount >= 1000:
            return f'{amount/1000:.1f}k'
        else:
            return f'{amount:.0f}'
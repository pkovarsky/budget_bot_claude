version: '3.8'

services:
  # ü§ñ Budget Bot - Production
  budget-bot:
    image: ghcr.io/${GITHUB_REPOSITORY:-your-username/budget_bot_claude}:latest
    container_name: budget-bot-prod
    restart: unless-stopped
    environment:
      - PYTHONUNBUFFERED=1
      - ENVIRONMENT=production
      - TZ=${TZ:-Europe/Amsterdam}
      - DATABASE_URL=postgresql://budget_user:${POSTGRES_PASSWORD}@postgres:5432/budget_bot
    env_file:
      - .env
    volumes:
      - app_logs:/app/logs
      - app_exports:/app/exports
      - app_charts:/app/charts
    networks:
      - budget-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import psycopg2; psycopg2.connect('postgresql://budget_user:${POSTGRES_PASSWORD}@postgres:5432/budget_bot').close()"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # üóÑÔ∏è PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: budget-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: budget_bot
      POSTGRES_USER: budget_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backups:/backups
      - ./scripts/init-postgres.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - budget-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U budget_user -d budget_bot"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # üü• Redis Cache
  redis:
    image: redis:7-alpine
    container_name: budget-redis-prod
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD} --maxmemory 128mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - budget-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # üîÑ Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: budget-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - budget-network
    depends_on:
      - budget-bot
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # üìä Database Backup Service
  postgres-backup:
    image: postgres:15-alpine
    container_name: budget-backup
    restart: "no"
    environment:
      POSTGRES_USER: budget_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: budget_bot
      POSTGRES_HOST: postgres
      BACKUP_RETENTION_DAYS: 7
    volumes:
      - postgres_backups:/backups
      - ./scripts/backup-postgres.sh:/backup.sh:ro
    networks:
      - budget-network
    depends_on:
      postgres:
        condition: service_healthy
    command: ["/bin/sh", "-c", "chmod +x /backup.sh && crond -f"]
    profiles:
      - backup

  # üìà Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: budget-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - budget-network
    ports:
      - "3000:3000"
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # üìä Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: budget-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - budget-network
    ports:
      - "9090:9090"
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # üìä Node Exporter
  node-exporter:
    image: prom/node-exporter:latest
    container_name: budget-node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - budget-network
    profiles:
      - monitoring

  # üîç Watchtower - Auto-updates
  watchtower:
    image: containrrr/watchtower
    container_name: budget-watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=3600
      - WATCHTOWER_INCLUDE_STOPPED=true
      - WATCHTOWER_REVIVE_STOPPED=false
    networks:
      - budget-network
    profiles:
      - auto-update

networks:
  budget-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  # üóÑÔ∏è Database volumes (persistent)
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/budget-bot/data/postgres
  
  postgres_backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/budget-bot/backups
  
  # üü• Redis data
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/budget-bot/data/redis
  
  # üìä Monitoring data
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/budget-bot/data/grafana
  
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/budget-bot/data/prometheus
  
  # üìù Application logs
  app_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/budget-bot/logs
  
  # üìä Nginx logs
  nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/budget-bot/logs/nginx
  
  # üì§ Exports and charts
  app_exports:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/budget-bot/data/exports
  
  app_charts:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/budget-bot/data/charts
name: 🚀 Deploy to VPS

on:
  push:
    branches: [ main, master ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.gitignore'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 🧪 Tests (same as before but faster)
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🗄️ Create test database
      run: python -c "from database import create_tables; create_tables()"
        
    - name: 🧪 Run critical tests
      run: |
        python -m pytest tests/test_memory_system.py -v
        python scripts/migrate_memory_system.py

  # 🏗️ Build and Push Docker Image
  build:
    name: 🏗️ Build & Push Image
    runs-on: ubuntu-latest
    needs: test
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
      
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: 🏗️ Build and push
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 🚀 Deploy to VPS
  deploy:
    name: 🚀 Deploy to VPS
    runs-on: ubuntu-latest
    needs: build
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ vars.APP_URL }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 📝 Prepare deployment files
      run: |
        # Create deployment package
        mkdir -p deploy
        cp docker-compose.prod.yml deploy/
        cp -r nginx deploy/ || echo "nginx config not found"
        cp -r monitoring deploy/ || echo "monitoring config not found"
        cp -r scripts deploy/
        
        # Create environment file for production
        cat > deploy/.env << EOF
        TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
        OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
        POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
        REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
        GRAFANA_PASSWORD=${{ secrets.GRAFANA_PASSWORD }}
        TZ=${{ vars.TZ || 'Europe/Amsterdam' }}
        GITHUB_REPOSITORY=${{ github.repository }}
        EOF
        
    - name: 📦 Create deployment archive
      run: |
        cd deploy
        tar -czf ../deployment.tar.gz .
        
    - name: 🔐 Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
        
    - name: 📤 Upload deployment files
      run: |
        scp deployment.tar.gz ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/tmp/
        
    - name: 🚀 Deploy on VPS
      run: |
        ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'ENDSSH'
          set -e
          
          # Navigate to app directory
          sudo mkdir -p /opt/budget-bot
          cd /opt/budget-bot
          
          # Backup current deployment
          if [ -f docker-compose.prod.yml ]; then
            echo "📦 Creating backup..."
            sudo cp docker-compose.prod.yml docker-compose.backup.yml
          fi
          
          # Extract new deployment
          echo "📥 Extracting deployment files..."
          sudo tar -xzf /tmp/deployment.tar.gz
          sudo chown -R $USER:$USER .
          
          # Setup directory structure
          echo "📁 Setting up directories..."
          sudo mkdir -p /opt/budget-bot/{data/{postgres,redis,grafana,prometheus,exports,charts},logs/nginx,backups}
          sudo chown -R $USER:$USER /opt/budget-bot
          
          # Pull latest images
          echo "🐳 Pulling latest images..."
          docker-compose -f docker-compose.prod.yml pull
          
          # Stop old containers gracefully
          echo "🛑 Stopping old containers..."
          docker-compose -f docker-compose.prod.yml down --timeout 30 || true
          
          # Run database migrations
          echo "🗄️ Running migrations..."
          docker-compose -f docker-compose.prod.yml run --rm budget-bot python scripts/migrate_memory_system.py || echo "Migration failed or not needed"
          
          # Start new containers
          echo "🚀 Starting new containers..."
          docker-compose -f docker-compose.prod.yml up -d
          
          # Wait for services to be ready
          echo "⏳ Waiting for services..."
          sleep 30
          
          # Check health
          echo "🏥 Checking health..."
          docker-compose -f docker-compose.prod.yml ps
          
          # Clean up
          rm -f /tmp/deployment.tar.gz
          docker system prune -f
          
          echo "✅ Deployment completed successfully!"
        ENDSSH
        
    - name: 🔍 Verify deployment
      run: |
        ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'ENDSSH'
          cd /opt/budget-bot
          
          # Check if containers are running
          echo "📊 Container status:"
          docker-compose -f docker-compose.prod.yml ps
          
          # Check logs for any errors
          echo "📝 Recent logs:"
          docker-compose -f docker-compose.prod.yml logs --tail=20 budget-bot
          
          # Test database connection
          echo "🗄️ Testing database..."
          docker-compose -f docker-compose.prod.yml exec -T budget-bot python -c "
from database import get_db_session
try:
    db = get_db_session()
    db.execute('SELECT 1')
    print('✅ Database connection: OK')
    db.close()
except Exception as e:
    print(f'❌ Database connection: {e}')
    exit(1)
" || echo "Database test failed"
        ENDSSH
        
    - name: 📊 Post-deployment monitoring
      if: always()
      run: |
        # Send notification to monitoring system
        curl -X POST \
          -H "Content-Type: application/json" \
          -d '{
            "deployment": {
              "status": "${{ job.status }}",
              "repository": "${{ github.repository }}",
              "commit": "${{ github.sha }}",
              "environment": "${{ github.event.inputs.environment || 'production' }}",
              "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"
            }
          }' \
          "${{ secrets.WEBHOOK_URL }}" || echo "Webhook notification failed"

  # 🔄 Rollback job (manual trigger)
  rollback:
    name: 🔄 Rollback Deployment
    runs-on: ubuntu-latest
    if: failure() && github.event.inputs.environment
    environment: 
      name: ${{ github.event.inputs.environment }}
    
    steps:
    - name: 🔐 Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
        
    - name: 🔄 Perform rollback
      run: |
        ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'ENDSSH'
          cd /opt/budget-bot
          
          if [ -f docker-compose.backup.yml ]; then
            echo "🔄 Rolling back to previous version..."
            
            # Stop current containers
            docker-compose -f docker-compose.prod.yml down
            
            # Restore backup
            cp docker-compose.backup.yml docker-compose.prod.yml
            
            # Start with backup configuration
            docker-compose -f docker-compose.prod.yml up -d
            
            echo "✅ Rollback completed!"
          else
            echo "❌ No backup found for rollback"
            exit 1
          fi
        ENDSSH

  # 📈 Performance monitoring
  monitor:
    name: 📈 Monitor Deployment
    runs-on: ubuntu-latest
    needs: deploy
    if: success()
    
    steps:
    - name: 🏥 Health check
      run: |
        # Wait a bit for services to stabilize
        sleep 60
        
        # Check if we can reach the application
        # (This would be a health endpoint if you had one)
        echo "Monitoring deployment health..."
        
    - name: 📊 Resource monitoring
      run: |
        ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'ENDSSH'
          cd /opt/budget-bot
          
          echo "💾 Disk usage:"
          df -h /opt/budget-bot
          
          echo "🐳 Container resource usage:"
          docker stats --no-stream
          
          echo "📊 Volume sizes:"
          sudo du -sh /opt/budget-bot/data/*
        ENDSSH
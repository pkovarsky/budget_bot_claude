name: 🧪 Tests

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    name: 🧪 Run Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        exclude:
          # Исключаем некоторые комбинации для экономии времени
          - os: windows-latest
            python-version: '3.9'
          - os: macos-latest
            python-version: '3.9'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: 📦 Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.cache/matplotlib
        key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.python-version }}-pip-
          
    - name: 📋 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🗄️ Create test database
      run: |
        python -c "from database import create_tables; create_tables()"
        
    - name: 🧪 Run unit tests
      run: |
        python -m pytest tests/ -v --tb=short
        
    - name: 🧠 Test memory system
      run: |
        python tests/test_memory_system.py
        
    - name: 🔄 Test migrations
      run: |
        python scripts/migrate_memory_system.py
        
    - name: 📊 Test chart generation (only on Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        python -c "
        from services.chart_service import ChartService
        import matplotlib
        matplotlib.use('Agg')  # Non-interactive backend for CI
        chart_service = ChartService()
        print('✅ Chart service initialized successfully')
        "
        
    - name: 🤖 Test OpenAI service (mock)
      run: |
        python -c "
        from services.openai_service import OpenAIService
        service = OpenAIService()
        print('✅ OpenAI service initialized successfully')
        "
        
    - name: 📝 Generate test coverage report
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      run: |
        pip install coverage
        coverage run -m pytest tests/
        coverage report
        coverage html
        
    - name: 📤 Upload coverage to codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: 📋 Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
        
    - name: 🎨 Check code formatting with Black
      run: |
        black --check --diff .
        
    - name: 🔤 Check import sorting with isort
      run: |
        isort --check-only --diff .
        
    - name: 🔍 Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: 🏷️ Type checking with mypy
      run: |
        mypy . --ignore-missing-imports --no-strict-optional
      continue-on-error: true  # mypy может быть строгим для этого проекта

  integration:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: test
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: budget_bot_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: 📋 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install psycopg2-binary  # для PostgreSQL
        
    - name: 🗄️ Test with PostgreSQL
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost/budget_bot_test
      run: |
        python -c "from database import create_tables; create_tables()"
        python tests/test_memory_system.py
        
    - name: 🧪 Run integration tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost/budget_bot_test
      run: |
        python -m pytest tests/ -v -k "integration" || echo "No integration tests found"

  security:
    name: 🔒 Security Check
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: 🔒 Run safety check
      run: |
        pip install safety
        safety check -r requirements.txt
        
    - name: 🔍 Run bandit security linter
      run: |
        pip install bandit
        bandit -r . -f json -o bandit-report.json || true
        
    - name: 📤 Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: bandit-report.json
#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from services.category_memory_service import CategoryMemoryService
from database import get_db_session, User, Category, CategoryMemory
import unittest

class TestMemorySystem(unittest.TestCase):
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
        self.memory_service = CategoryMemoryService()
        self.test_user_id = 999999  # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        db = get_db_session()
        try:
            db.query(CategoryMemory).filter(CategoryMemory.user_id == self.test_user_id).delete()
            db.commit()
        finally:
            db.close()
    
    def tearDown(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤"""
        db = get_db_session()
        try:
            db.query(CategoryMemory).filter(CategoryMemory.user_id == self.test_user_id).delete()
            db.commit()
        finally:
            db.close()
    
    def test_normalize_description(self):
        """–¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏–π"""
        test_cases = [
            ("–ø—Ä–æ–¥—É–∫—Ç—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ", "–ø—Ä–æ–¥—É–∫—Ç—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ"),
            ("–ü–†–û–î–£–ö–¢–´ –í –ú–ê–ì–ê–ó–ò–ù–ï!!!", "–ø—Ä–æ–¥—É–∫—Ç—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ"),
            ("  –º–Ω–æ–≥–æ   –ø—Ä–æ–±–µ–ª–æ–≤  ", "–º–Ω–æ–≥–æ –ø—Ä–æ–±–µ–ª–æ–≤"),
            ("—Ç–æ–≤–∞—Ä—ã 25.5 EUR", "—Ç–æ–≤–∞—Ä—ã"),
            ("–∫–∞—Ñ–µ ‚Ññ1", "–∫–∞—Ñ–µ"),
        ]
        
        for input_text, expected in test_cases:
            result = self.memory_service.normalize_description(input_text)
            self.assertEqual(result, expected, f"–û—à–∏–±–∫–∞ –¥–ª—è '{input_text}': –æ–∂–∏–¥–∞–ª–æ—Å—å '{expected}', –ø–æ–ª—É—á–µ–Ω–æ '{result}'")
    
    def test_remember_and_suggest(self):
        """–¢–µ—Å—Ç –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        # –í—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥ –¥–ª—è —Ç–µ—Å—Ç–∞
        original_threshold = self.memory_service.min_confidence
        self.memory_service.min_confidence = 0.5
        
        try:
            # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–≤—è–∑—å
            self.memory_service.remember_category(
                user_id=self.test_user_id,
                description="–ø—Ä–æ–¥—É–∫—Ç—ã –≤ —Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç–µ",
                category_id=1,
                confidence=1.0
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ—Ö–æ–∂–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
            suggestion = self.memory_service.suggest_category(
                user_id=self.test_user_id,
                description="–ø—Ä–æ–¥—É–∫—Ç—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ"
            )
            
            self.assertIsNotNone(suggestion, "–°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ")
            if suggestion:
                self.assertEqual(suggestion['category_id'], 1)
                self.assertGreater(suggestion['confidence'], 0.5)
        finally:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Ä–æ–≥
            self.memory_service.min_confidence = original_threshold
    
    def test_extract_keywords(self):
        """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
        description = "–ø–æ–∫—É–ø–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –±–æ–ª—å—à–æ–º –º–∞–≥–∞–∑–∏–Ω–µ"
        keywords = self.memory_service.extract_keywords(description)
        
        expected_keywords = ["–ø–æ–∫—É–ø–∫–∞", "–ø—Ä–æ–¥—É–∫—Ç–æ–≤", "–±–æ–ª—å—à–æ–º", "–º–∞–≥–∞–∑–∏–Ω–µ"]
        self.assertEqual(sorted(keywords), sorted(expected_keywords))
    
    def test_similarity_calculation(self):
        """–¢–µ—Å—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ö–æ–∂–µ—Å—Ç–∏"""
        text1 = "–ø—Ä–æ–¥—É–∫—Ç—ã –º–∞–≥–∞–∑–∏–Ω"
        text2 = "–ø—Ä–æ–¥—É–∫—Ç—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ"
        
        similarity = self.memory_service.calculate_similarity(text1, text2)
        self.assertGreater(similarity, 0.7, "–°—Ö–æ–∂–∏–µ —Ç–µ–∫—Å—Ç—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –≤—ã—Å–æ–∫—É—é —Å—Ö–æ–∂–µ—Å—Ç—å")
        
        text3 = "—Å–æ–≤—Å–µ–º –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç"
        similarity2 = self.memory_service.calculate_similarity(text1, text3)
        self.assertLess(similarity2, 0.3, "–†–∞–∑–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –Ω–∏–∑–∫—É—é —Å—Ö–æ–∂–µ—Å—Ç—å")

def run_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
    
    suite = unittest.TestLoader().loadTestsFromTestCase(TestMemorySystem)
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    if result.wasSuccessful():
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
        return False

if __name__ == "__main__":
    run_tests()
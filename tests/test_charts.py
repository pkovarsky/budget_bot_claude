#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –≥—Ä–∞—Ñ–∏–∫–æ–≤
"""
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import logging
from services.chart_service import ChartService
from database import get_db_session, User, Transaction, Category
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

def test_matplotlib_import():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ matplotlib"""
    try:
        import matplotlib
        matplotlib.use('Agg')
        import matplotlib.pyplot as plt
        import pandas as pd
        import numpy as np
        logger.info("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        return True
    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def test_chart_service():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
    try:
        chart_service = ChartService()
        logger.info("‚úÖ ChartService —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        return chart_service
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ChartService: {e}")
        return None

def test_database_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        db = get_db_session()
        users_count = db.query(User).count()
        transactions_count = db.query(Transaction).count()
        categories_count = db.query(Category).count()
        
        logger.info(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞:")
        logger.info(f"  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}")
        logger.info(f"  - –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {transactions_count}")
        logger.info(f"  - –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {categories_count}")
        
        db.close()
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return False

def test_chart_generation(user_telegram_id: int = None):
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞"""
    if not user_telegram_id:
        # –ù–∞–π–¥–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
        db = get_db_session()
        try:
            user_with_transactions = db.query(User).join(Transaction).first()
            if user_with_transactions:
                user_telegram_id = user_with_transactions.telegram_id
            else:
                logger.error("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                return False
        finally:
            db.close()
    
    try:
        chart_service = ChartService()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
        logger.info("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É...")
        pie_chart = chart_service.generate_category_pie_chart(
            user_id=user_telegram_id,
            period_days=30
        )
        
        if pie_chart:
            logger.info("‚úÖ –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            logger.info(f"  - –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(pie_chart.getvalue())} –±–∞–π—Ç")
        else:
            logger.warning("‚ö†Ô∏è –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–¥–æ–≤
        logger.info("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–¥–æ–≤...")
        trends_chart = chart_service.generate_spending_trends_chart(
            user_id=user_telegram_id,
            period_days=30
        )
        
        if trends_chart:
            logger.info("‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–¥–æ–≤ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            logger.info(f"  - –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(trends_chart.getvalue())} –±–∞–π—Ç")
        else:
            logger.warning("‚ö†Ô∏è –ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–µ —Å–æ–∑–¥–∞–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Å—è—á–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        logger.info("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ—Å—è—á–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ...")
        monthly_chart = chart_service.generate_monthly_comparison_chart(
            user_id=user_telegram_id,
            months=6
        )
        
        if monthly_chart:
            logger.info("‚úÖ –ú–µ—Å—è—á–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            logger.info(f"  - –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(monthly_chart.getvalue())} –±–∞–π—Ç")
        else:
            logger.warning("‚ö†Ô∏è –ú–µ—Å—è—á–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return False

def create_test_data():
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
    try:
        db = get_db_session()
        
        # –ù–∞–π–¥–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.query(User).first()
        if not user:
            logger.error("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        existing_transactions = db.query(Transaction).filter(Transaction.user_id == user.id).count()
        if existing_transactions > 0:
            logger.info(f"‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å {existing_transactions} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
            return True
        
        # –°–æ–∑–¥–∞–¥–∏–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        categories = db.query(Category).filter(Category.user_id == user.id).all()
        if not categories:
            test_categories = [
                Category(name="–ü—Ä–æ–¥—É–∫—Ç—ã", user_id=user.id, is_default=True, emoji="üõí"),
                Category(name="–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", user_id=user.id, is_default=True, emoji="üöó"),
                Category(name="–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", user_id=user.id, is_default=True, emoji="üéÆ"),
            ]
            for cat in test_categories:
                db.add(cat)
            db.commit()
            categories = test_categories
        
        # –°–æ–∑–¥–∞–¥–∏–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        test_transactions = []
        for i in range(10):
            date = datetime.now() - timedelta(days=i)
            for j, category in enumerate(categories):
                transaction = Transaction(
                    user_id=user.id,
                    category_id=category.id,
                    amount=-(10 + i * 5 + j * 3),  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤
                    currency="EUR",
                    description=f"–¢–µ—Å—Ç–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {category.name} {i}",
                    created_at=date
                )
                test_transactions.append(transaction)
        
        for transaction in test_transactions:
            db.add(transaction)
        
        db.commit()
        db.close()
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(test_transactions)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤...")
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
    logger.info("\nüì¶ –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –±–∏–±–ª–∏–æ—Ç–µ–∫")
    if not test_matplotlib_import():
        logger.error("‚ùå –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω")
        return
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
    logger.info("\nüîß –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤")
    chart_service = test_chart_service()
    if not chart_service:
        logger.error("‚ùå –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω")
        return
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    logger.info("\nüóÑÔ∏è –¢–µ—Å—Ç 3: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    if not test_database_connection():
        logger.error("‚ùå –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –ø—Ä–æ–≤–∞–ª–µ–Ω")
        return
    
    # –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    logger.info("\nüìä –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    if not create_test_data():
        logger.error("‚ùå –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–∞–ª–µ–Ω")
        return
    
    # –¢–µ—Å—Ç 5: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    logger.info("\nüìà –¢–µ—Å—Ç 5: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤")
    if not test_chart_generation():
        logger.error("‚ùå –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω")
        return
    
    logger.info("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

if __name__ == "__main__":
    main()
version: '3.8'

services:
  # ü§ñ Budget Bot
  budget-bot:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: budget-bot
    restart: unless-stopped
    environment:
      - DATABASE_URL=sqlite:////app/data/budget_bot.db
      - PYTHONUNBUFFERED=1
      - TZ=Europe/Amsterdam
    env_file:
      - .env
    volumes:
      - bot_data:/app/data
      - ./logs:/app/logs
    networks:
      - budget-network
    healthcheck:
      test: ["CMD", "python", "-c", "import sqlite3; sqlite3.connect('/app/data/budget_bot.db').execute('SELECT 1')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - postgres
      - redis

  # üóÑÔ∏è PostgreSQL (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)
  postgres:
    image: postgres:15-alpine
    container_name: budget-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: budget_bot
      POSTGRES_USER: budget_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-budget_pass_change_me}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - budget-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U budget_user -d budget_bot"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"  # –¢–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

  # üü• Redis (–¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
  redis:
    image: redis:7-alpine
    container_name: budget-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_pass_change_me}
    volumes:
      - redis_data:/data
    networks:
      - budget-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # üìä Grafana (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  grafana:
    image: grafana/grafana:latest
    container_name: budget-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin_change_me}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    networks:
      - budget-network
    ports:
      - "3000:3000"
    profiles:
      - monitoring

  # üìà Prometheus (–º–µ—Ç—Ä–∏–∫–∏, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  prometheus:
    image: prom/prometheus:latest
    container_name: budget-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - budget-network
    ports:
      - "9090:9090"
    profiles:
      - monitoring

  # üîÑ Nginx (reverse proxy, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  nginx:
    image: nginx:alpine
    container_name: budget-nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - budget-network
    ports:
      - "80:80"
      - "443:443"
    profiles:
      - proxy

networks:
  budget-network:
    driver: bridge

volumes:
  bot_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local